
TS5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001ae4  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000191  00800142  00800142  00001bba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000510  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b513  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002233  00000000  00000000  0000d64f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002aab  00000000  00000000  0000f882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e48  00000000  00000000  00012330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000242f  00000000  00000000  00013178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a71  00000000  00000000  000155a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  0001a018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_18>
      4c:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_24>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	e6 01       	movw	r28, r12
      ba:	03 05       	cpc	r16, r3
      bc:	ab 08       	sbc	r10, r11

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e4 ee       	ldi	r30, 0xE4	; 228
      d2:	fa e1       	ldi	r31, 0x1A	; 26
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 34       	cpi	r26, 0x42	; 66
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	22 e0       	ldi	r18, 0x02	; 2
      e2:	a2 e4       	ldi	r26, 0x42	; 66
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a3 3d       	cpi	r26, 0xD3	; 211
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <main>
     10a:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     112:	26 e0       	ldi	r18, 0x06	; 6
     114:	40 e8       	ldi	r20, 0x80	; 128
     116:	55 e2       	ldi	r21, 0x25	; 37
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	8d e2       	ldi	r24, 0x2D	; 45
     11e:	92 e0       	ldi	r25, 0x02	; 2
     120:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <_ZN14HardwareSerial5beginEmh>
int kai;

void setup()
{
	Serial.begin(9600);
	Serial.println("77777777");
     124:	65 e0       	ldi	r22, 0x05	; 5
     126:	71 e0       	ldi	r23, 0x01	; 1
     128:	8d e2       	ldi	r24, 0x2D	; 45
     12a:	92 e0       	ldi	r25, 0x02	; 2
     12c:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN5Print7printlnEPKc>
	/*步进电机上电初始化*/
	//引脚配置
	pinMode(en_pin, OUTPUT); // Enable: EN可以使用单片机端口控制，也可以直接连接GND使能
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	86 e0       	ldi	r24, 0x06	; 6
     134:	0e 94 c4 0b 	call	0x1788	; 0x1788 <pinMode>
	pinMode(steps_pin, OUTPUT); // steps:脉冲个数
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	85 e0       	ldi	r24, 0x05	; 5
     13c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <pinMode>
	pinMode(dir_pin, OUTPUT); // dir:为方向控制
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	84 e0       	ldi	r24, 0x04	; 4
     144:	0e 94 c4 0b 	call	0x1788	; 0x1788 <pinMode>
	
	//上电寻找限位
	pinMode(Zero_pos, INPUT);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	81 e1       	ldi	r24, 0x11	; 17
     14c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <pinMode>
	
	while(1){
		digitalWrite(4,HIGH);
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
		digitalWrite(5,HIGH);
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	85 e0       	ldi	r24, 0x05	; 5
     15c:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
		delayMicroseconds(800);
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	93 e0       	ldi	r25, 0x03	; 3
     164:	0e 94 38 0b 	call	0x1670	; 0x1670 <delayMicroseconds>
		digitalWrite(5,LOW); // Output low
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	85 e0       	ldi	r24, 0x05	; 5
     16c:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
		delayMicroseconds(800);
     170:	80 e2       	ldi	r24, 0x20	; 32
     172:	93 e0       	ldi	r25, 0x03	; 3
     174:	0e 94 38 0b 	call	0x1670	; 0x1670 <delayMicroseconds>
		int Zero_pos_val = analogRead(Zero_pos);
     178:	81 e1       	ldi	r24, 0x11	; 17
     17a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <analogRead>
	ESC2.writeMicroseconds(1000);
	delay(2000);
	pinMode(A4, INPUT); //SDA数据线
	pinMode(A5, INPUT); //SCL时钟线
	Wire.begin();        // join i2cbus (主机，不用写IIC地址)
	Serial.begin(9600);
     17e:	e8 cf       	rjmp	.-48     	; 0x150 <setup+0x3e>

00000180 <loop>:
	float val2 = 0;
	float old_pos = 0;
	float new_pos = 0;
	float pos = 0;
	
	delay(5500);
     180:	6c e7       	ldi	r22, 0x7C	; 124
     182:	75 e1       	ldi	r23, 0x15	; 21
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <delay>
	ESC1.writeMicroseconds(1000);
     18c:	68 ee       	ldi	r22, 0xE8	; 232
     18e:	73 e0       	ldi	r23, 0x03	; 3
     190:	85 e4       	ldi	r24, 0x45	; 69
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Servo17writeMicrosecondsEi>
	ESC2.writeMicroseconds(1000);
     198:	68 ee       	ldi	r22, 0xE8	; 232
     19a:	73 e0       	ldi	r23, 0x03	; 3
     19c:	82 e4       	ldi	r24, 0x42	; 66
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Servo17writeMicrosecondsEi>
}

void loop() {
	float val = 0;
	float val2 = 0;
	float old_pos = 0;
     1a4:	c1 2c       	mov	r12, r1
     1a6:	d1 2c       	mov	r13, r1
     1a8:	e1 2c       	mov	r14, r1
     1aa:	f1 2c       	mov	r15, r1
	delay(5500);
	ESC1.writeMicroseconds(1000);
	ESC2.writeMicroseconds(1000);
	while (1)
	{
		new_pos = random(-180, 180);
     1ac:	24 eb       	ldi	r18, 0xB4	; 180
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	6c e4       	ldi	r22, 0x4C	; 76
     1b6:	7f ef       	ldi	r23, 0xFF	; 255
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	9f ef       	ldi	r25, 0xFF	; 255
     1bc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_Z6randomll>
     1c0:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
     1c4:	16 2f       	mov	r17, r22
     1c6:	d7 2f       	mov	r29, r23
     1c8:	c8 2f       	mov	r28, r24
     1ca:	09 2f       	mov	r16, r25
		if (new_pos == 0)
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	a9 01       	movw	r20, r18
     1d2:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
     1d6:	81 11       	cpse	r24, r1
     1d8:	08 c0       	rjmp	.+16     	; 0x1ea <loop+0x6a>
		{
			digitalWrite(4, HIGH);
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	84 e0       	ldi	r24, 0x04	; 4
     1de:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
			digitalWrite(5, LOW);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	85 e0       	ldi	r24, 0x05	; 5
     1e6:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
		}
		pos = new_pos - old_pos;
     1ea:	96 01       	movw	r18, r12
     1ec:	a7 01       	movw	r20, r14
     1ee:	61 2f       	mov	r22, r17
     1f0:	7d 2f       	mov	r23, r29
     1f2:	8c 2f       	mov	r24, r28
     1f4:	90 2f       	mov	r25, r16
     1f6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
     1fa:	2b 01       	movw	r4, r22
     1fc:	3c 01       	movw	r6, r24
		val2 = pos * 155 / 16 / 1.8;
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	4b e1       	ldi	r20, 0x1B	; 27
     204:	53 e4       	ldi	r21, 0x43	; 67
     206:	0e 94 a2 06 	call	0xd44	; 0xd44 <__mulsf3>
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e8       	ldi	r20, 0x80	; 128
     210:	5d e3       	ldi	r21, 0x3D	; 61
     212:	0e 94 a2 06 	call	0xd44	; 0xd44 <__mulsf3>
     216:	26 e6       	ldi	r18, 0x66	; 102
     218:	36 e6       	ldi	r19, 0x66	; 102
     21a:	46 ee       	ldi	r20, 0xE6	; 230
     21c:	5f e3       	ldi	r21, 0x3F	; 63
     21e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
     222:	6b 01       	movw	r12, r22
     224:	7c 01       	movw	r14, r24
		old_pos = new_pos;
		if (val2 < 0)
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	a9 01       	movw	r20, r18
     22c:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
		{
			val = -val2;
     230:	46 01       	movw	r8, r12
     232:	57 01       	movw	r10, r14
			digitalWrite(5, LOW);
		}
		pos = new_pos - old_pos;
		val2 = pos * 155 / 16 / 1.8;
		old_pos = new_pos;
		if (val2 < 0)
     234:	87 ff       	sbrs	r24, 7
     236:	04 c0       	rjmp	.+8      	; 0x240 <loop+0xc0>
		{
			val = -val2;
     238:	b7 fa       	bst	r11, 7
     23a:	b0 94       	com	r11
     23c:	b7 f8       	bld	r11, 7
     23e:	b0 94       	com	r11
			} else {
			val = val2;
		}//

		Serial.println(val);
     240:	22 e0       	ldi	r18, 0x02	; 2
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	b5 01       	movw	r22, r10
     246:	a4 01       	movw	r20, r8
     248:	8d e2       	ldi	r24, 0x2D	; 45
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print7printlnEdi>
		Serial.println(new_pos);
     250:	22 e0       	ldi	r18, 0x02	; 2
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	41 2f       	mov	r20, r17
     256:	5d 2f       	mov	r21, r29
     258:	6c 2f       	mov	r22, r28
     25a:	70 2f       	mov	r23, r16
     25c:	8d e2       	ldi	r24, 0x2D	; 45
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print7printlnEdi>
		Serial.println(pos);
     264:	22 e0       	ldi	r18, 0x02	; 2
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	b3 01       	movw	r22, r6
     26a:	a2 01       	movw	r20, r4
     26c:	8d e2       	ldi	r24, 0x2D	; 45
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print7printlnEdi>
		Serial.println(old_pos);
     274:	22 e0       	ldi	r18, 0x02	; 2
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	41 2f       	mov	r20, r17
     27a:	5d 2f       	mov	r21, r29
     27c:	6c 2f       	mov	r22, r28
     27e:	70 2f       	mov	r23, r16
     280:	8d e2       	ldi	r24, 0x2D	; 45
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <_ZN5Print7printlnEdi>
		if (1937.5 >= val2 && val2 > 0)
     288:	20 e0       	ldi	r18, 0x00	; 0
     28a:	30 e3       	ldi	r19, 0x30	; 48
     28c:	42 ef       	ldi	r20, 0xF2	; 242
     28e:	54 e4       	ldi	r21, 0x44	; 68
     290:	c7 01       	movw	r24, r14
     292:	b6 01       	movw	r22, r12
     294:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
     298:	18 16       	cp	r1, r24
     29a:	8c f1       	brlt	.+98     	; 0x2fe <loop+0x17e>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	a9 01       	movw	r20, r18
     2a2:	c7 01       	movw	r24, r14
     2a4:	b6 01       	movw	r22, r12
     2a6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__gesf2>
     2aa:	18 16       	cp	r1, r24
     2ac:	44 f5       	brge	.+80     	; 0x2fe <loop+0x17e>
		{
			digitalWrite(4, HIGH);
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	84 e0       	ldi	r24, 0x04	; 4
     2b2:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
			for (int s = 0; s <= val; s++ )
     2b6:	e1 2c       	mov	r14, r1
     2b8:	f1 2c       	mov	r15, r1
     2ba:	b7 01       	movw	r22, r14
     2bc:	0f 2c       	mov	r0, r15
     2be:	00 0c       	add	r0, r0
     2c0:	88 0b       	sbc	r24, r24
     2c2:	99 0b       	sbc	r25, r25
     2c4:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
     2c8:	a5 01       	movw	r20, r10
     2ca:	94 01       	movw	r18, r8
     2cc:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
     2d0:	18 16       	cp	r1, r24
     2d2:	0c f4       	brge	.+2      	; 0x2d6 <loop+0x156>
     2d4:	52 c0       	rjmp	.+164    	; 0x37a <loop+0x1fa>
			{

				digitalWrite(5, HIGH);
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
				delayMicroseconds(800);
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	93 e0       	ldi	r25, 0x03	; 3
     2e2:	0e 94 38 0b 	call	0x1670	; 0x1670 <delayMicroseconds>
				digitalWrite(5, LOW); // Output low
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>

				delayMicroseconds(800);
     2ee:	80 e2       	ldi	r24, 0x20	; 32
     2f0:	93 e0       	ldi	r25, 0x03	; 3
     2f2:	0e 94 38 0b 	call	0x1670	; 0x1670 <delayMicroseconds>
		Serial.println(pos);
		Serial.println(old_pos);
		if (1937.5 >= val2 && val2 > 0)
		{
			digitalWrite(4, HIGH);
			for (int s = 0; s <= val; s++ )
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	e8 1a       	sub	r14, r24
     2fa:	f8 0a       	sbc	r15, r24
     2fc:	de cf       	rjmp	.-68     	; 0x2ba <loop+0x13a>

				delayMicroseconds(800);

			}
		}
		else if (-1937.5 <= val2 && val2 < 0)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e3       	ldi	r19, 0x30	; 48
     302:	42 ef       	ldi	r20, 0xF2	; 242
     304:	54 ec       	ldi	r21, 0xC4	; 196
     306:	c7 01       	movw	r24, r14
     308:	b6 01       	movw	r22, r12
     30a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__gesf2>
     30e:	87 fd       	sbrc	r24, 7
     310:	30 c0       	rjmp	.+96     	; 0x372 <loop+0x1f2>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	c7 01       	movw	r24, r14
     31a:	b6 01       	movw	r22, r12
     31c:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
     320:	87 ff       	sbrs	r24, 7
     322:	27 c0       	rjmp	.+78     	; 0x372 <loop+0x1f2>
		{

			digitalWrite(4, LOW);
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
			for (int t = 0; t <= val; t++)
     32c:	e1 2c       	mov	r14, r1
     32e:	f1 2c       	mov	r15, r1
     330:	b7 01       	movw	r22, r14
     332:	0f 2c       	mov	r0, r15
     334:	00 0c       	add	r0, r0
     336:	88 0b       	sbc	r24, r24
     338:	99 0b       	sbc	r25, r25
     33a:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
     33e:	a5 01       	movw	r20, r10
     340:	94 01       	movw	r18, r8
     342:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
     346:	18 16       	cp	r1, r24
     348:	c4 f0       	brlt	.+48     	; 0x37a <loop+0x1fa>
			{
				digitalWrite(5, HIGH);
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	85 e0       	ldi	r24, 0x05	; 5
     34e:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
				delayMicroseconds(800);
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	93 e0       	ldi	r25, 0x03	; 3
     356:	0e 94 38 0b 	call	0x1670	; 0x1670 <delayMicroseconds>
				digitalWrite(5, LOW); // Output low
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	85 e0       	ldi	r24, 0x05	; 5
     35e:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>

				delayMicroseconds(800);
     362:	80 e2       	ldi	r24, 0x20	; 32
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 38 0b 	call	0x1670	; 0x1670 <delayMicroseconds>
		}
		else if (-1937.5 <= val2 && val2 < 0)
		{

			digitalWrite(4, LOW);
			for (int t = 0; t <= val; t++)
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	e8 1a       	sub	r14, r24
     36e:	f8 0a       	sbc	r15, r24
     370:	df cf       	rjmp	.-66     	; 0x330 <loop+0x1b0>

			}
		}
		else
		{
			digitalWrite(5, LOW);
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	85 e0       	ldi	r24, 0x05	; 5
     376:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>

		}

		ESC1.writeMicroseconds(1100);
     37a:	6c e4       	ldi	r22, 0x4C	; 76
     37c:	74 e0       	ldi	r23, 0x04	; 4
     37e:	85 e4       	ldi	r24, 0x45	; 69
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Servo17writeMicrosecondsEi>
		ESC2.writeMicroseconds(1100);
     386:	6c e4       	ldi	r22, 0x4C	; 76
     388:	74 e0       	ldi	r23, 0x04	; 4
     38a:	82 e4       	ldi	r24, 0x42	; 66
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Servo17writeMicrosecondsEi>
		delay(2000);
     392:	60 ed       	ldi	r22, 0xD0	; 208
     394:	77 e0       	ldi	r23, 0x07	; 7
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <delay>

		ESC1.writeMicroseconds(1000);
     39e:	68 ee       	ldi	r22, 0xE8	; 232
     3a0:	73 e0       	ldi	r23, 0x03	; 3
     3a2:	85 e4       	ldi	r24, 0x45	; 69
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Servo17writeMicrosecondsEi>
		ESC2.writeMicroseconds(1000);
     3aa:	68 ee       	ldi	r22, 0xE8	; 232
     3ac:	73 e0       	ldi	r23, 0x03	; 3
     3ae:	82 e4       	ldi	r24, 0x42	; 66
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Servo17writeMicrosecondsEi>

		//digitalWrite(4,HIGH);
		//digitalWrite(5,LOW);
		delay(2000);
     3b6:	60 ed       	ldi	r22, 0xD0	; 208
     3b8:	77 e0       	ldi	r23, 0x07	; 7
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <delay>
			digitalWrite(4, HIGH);
			digitalWrite(5, LOW);
		}
		pos = new_pos - old_pos;
		val2 = pos * 155 / 16 / 1.8;
		old_pos = new_pos;
     3c2:	c1 2e       	mov	r12, r17
     3c4:	dd 2e       	mov	r13, r29
     3c6:	ec 2e       	mov	r14, r28
     3c8:	f0 2e       	mov	r15, r16
		ESC2.writeMicroseconds(1000);

		//digitalWrite(4,HIGH);
		//digitalWrite(5,LOW);
		delay(2000);
	}
     3ca:	f0 ce       	rjmp	.-544    	; 0x1ac <loop+0x2c>

000003cc <_GLOBAL__sub_I_ESC1>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio



Servo ESC1;//两个电调
     3cc:	85 e4       	ldi	r24, 0x45	; 69
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN5ServoC1Ev>
Servo ESC2;
     3d4:	82 e4       	ldi	r24, 0x42	; 66
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0c 94 af 02 	jmp	0x55e	; 0x55e <_ZN5ServoC1Ev>

000003dc <__vector_11>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
     3fe:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     402:	87 ff       	sbrs	r24, 7
     404:	05 c0       	rjmp	.+10     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     406:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     40a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     40e:	1b c0       	rjmp	.+54     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     410:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <_ZL7Channel>
     414:	02 2e       	mov	r0, r18
     416:	00 0c       	add	r0, r0
     418:	33 0b       	sbc	r19, r19
     41a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <ServoCount>
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	28 17       	cp	r18, r24
     422:	39 07       	cpc	r19, r25
     424:	84 f4       	brge	.+32     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     426:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     42a:	08 2e       	mov	r0, r24
     42c:	00 0c       	add	r0, r0
     42e:	99 0b       	sbc	r25, r25
     430:	fc 01       	movw	r30, r24
     432:	ee 0f       	add	r30, r30
     434:	ff 1f       	adc	r31, r31
     436:	8e 0f       	add	r24, r30
     438:	9f 1f       	adc	r25, r31
     43a:	fc 01       	movw	r30, r24
     43c:	e6 5b       	subi	r30, 0xB6	; 182
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	80 81       	ld	r24, Z
     442:	86 fd       	sbrc	r24, 6
     444:	15 c0       	rjmp	.+42     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
     446:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_ZL7Channel>
     450:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <_ZL7Channel>
     454:	02 2e       	mov	r0, r18
     456:	00 0c       	add	r0, r0
     458:	33 0b       	sbc	r19, r19
     45a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <ServoCount>
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	28 17       	cp	r18, r24
     462:	39 07       	cpc	r19, r25
     464:	c4 f4       	brge	.+48     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     466:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     46a:	8c 30       	cpi	r24, 0x0C	; 12
     46c:	64 f1       	brlt	.+88     	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
     46e:	13 c0       	rjmp	.+38     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     470:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     474:	08 2e       	mov	r0, r24
     476:	00 0c       	add	r0, r0
     478:	99 0b       	sbc	r25, r25
     47a:	fc 01       	movw	r30, r24
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	8e 0f       	add	r24, r30
     482:	9f 1f       	adc	r25, r31
     484:	fc 01       	movw	r30, r24
     486:	e6 5b       	subi	r30, 0xB6	; 182
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	80 81       	ld	r24, Z
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	8f 73       	andi	r24, 0x3F	; 63
     490:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
     494:	d8 cf       	rjmp	.-80     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     496:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     49a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     49e:	04 96       	adiw	r24, 0x04	; 4
     4a0:	80 34       	cpi	r24, 0x40	; 64
     4a2:	9c 49       	sbci	r25, 0x9C	; 156
     4a4:	18 f4       	brcc	.+6      	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
     4a6:	80 e4       	ldi	r24, 0x40	; 64
     4a8:	9c e9       	ldi	r25, 0x9C	; 156
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     4ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4b4:	04 96       	adiw	r24, 0x04	; 4
     4b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_ZL7Channel>
     4c4:	3b c0       	rjmp	.+118    	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
     4c6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4ca:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     4ce:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     4d2:	08 2e       	mov	r0, r24
     4d4:	00 0c       	add	r0, r0
     4d6:	99 0b       	sbc	r25, r25
     4d8:	fc 01       	movw	r30, r24
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	8e 0f       	add	r24, r30
     4e0:	9f 1f       	adc	r25, r31
     4e2:	fc 01       	movw	r30, r24
     4e4:	e6 5b       	subi	r30, 0xB6	; 182
     4e6:	fe 4f       	sbci	r31, 0xFE	; 254
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	92 81       	ldd	r25, Z+2	; 0x02
     4ec:	82 0f       	add	r24, r18
     4ee:	93 1f       	adc	r25, r19
     4f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4f8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     4fc:	08 2e       	mov	r0, r24
     4fe:	00 0c       	add	r0, r0
     500:	99 0b       	sbc	r25, r25
     502:	fc 01       	movw	r30, r24
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	8e 0f       	add	r24, r30
     50a:	9f 1f       	adc	r25, r31
     50c:	fc 01       	movw	r30, r24
     50e:	e6 5b       	subi	r30, 0xB6	; 182
     510:	fe 4f       	sbci	r31, 0xFE	; 254
     512:	80 81       	ld	r24, Z
     514:	86 ff       	sbrs	r24, 6
     516:	12 c0       	rjmp	.+36     	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
     518:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_ZL7Channel>
     51c:	08 2e       	mov	r0, r24
     51e:	00 0c       	add	r0, r0
     520:	99 0b       	sbc	r25, r25
     522:	fc 01       	movw	r30, r24
     524:	ee 0f       	add	r30, r30
     526:	ff 1f       	adc	r31, r31
     528:	8e 0f       	add	r24, r30
     52a:	9f 1f       	adc	r25, r31
     52c:	fc 01       	movw	r30, r24
     52e:	e6 5b       	subi	r30, 0xB6	; 182
     530:	fe 4f       	sbci	r31, 0xFE	; 254
     532:	80 81       	ld	r24, Z
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8f 73       	andi	r24, 0x3F	; 63
     538:	0e 94 00 0c 	call	0x1800	; 0x1800 <digitalWrite>
     53c:	ff 91       	pop	r31
     53e:	ef 91       	pop	r30
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	7f 91       	pop	r23
     54a:	6f 91       	pop	r22
     54c:	5f 91       	pop	r21
     54e:	4f 91       	pop	r20
     550:	3f 91       	pop	r19
     552:	2f 91       	pop	r18
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <_ZN5ServoC1Ev>:
     55e:	fc 01       	movw	r30, r24
     560:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <ServoCount>
     564:	9c 30       	cpi	r25, 0x0C	; 12
     566:	a0 f4       	brcc	.+40     	; 0x590 <_ZN5ServoC1Ev+0x32>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	89 0f       	add	r24, r25
     56c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ServoCount>
     570:	90 83       	st	Z, r25
     572:	89 2f       	mov	r24, r25
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	fc 01       	movw	r30, r24
     578:	ee 0f       	add	r30, r30
     57a:	ff 1f       	adc	r31, r31
     57c:	8e 0f       	add	r24, r30
     57e:	9f 1f       	adc	r25, r31
     580:	fc 01       	movw	r30, r24
     582:	e6 5b       	subi	r30, 0xB6	; 182
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	88 eb       	ldi	r24, 0xB8	; 184
     588:	9b e0       	ldi	r25, 0x0B	; 11
     58a:	92 83       	std	Z+2, r25	; 0x02
     58c:	81 83       	std	Z+1, r24	; 0x01
     58e:	08 95       	ret
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	80 83       	st	Z, r24
     594:	08 95       	ret

00000596 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
     596:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     598:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     59a:	9c 30       	cpi	r25, 0x0C	; 12
     59c:	80 f5       	brcc	.+96     	; 0x5fe <_ZN5Servo17writeMicrosecondsEi+0x68>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	28 e8       	ldi	r18, 0x88	; 136
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	28 1b       	sub	r18, r24
     5a6:	31 09       	sbc	r19, r1
     5a8:	87 fd       	sbrc	r24, 7
     5aa:	33 95       	inc	r19
     5ac:	22 0f       	add	r18, r18
     5ae:	33 1f       	adc	r19, r19
     5b0:	22 0f       	add	r18, r18
     5b2:	33 1f       	adc	r19, r19
     5b4:	62 17       	cp	r22, r18
     5b6:	73 07       	cpc	r23, r19
     5b8:	7c f0       	brlt	.+30     	; 0x5d8 <_ZN5Servo17writeMicrosecondsEi+0x42>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
     5ba:	82 81       	ldd	r24, Z+2	; 0x02
     5bc:	28 e5       	ldi	r18, 0x58	; 88
     5be:	32 e0       	ldi	r19, 0x02	; 2
     5c0:	28 1b       	sub	r18, r24
     5c2:	31 09       	sbc	r19, r1
     5c4:	87 fd       	sbrc	r24, 7
     5c6:	33 95       	inc	r19
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	22 0f       	add	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	62 17       	cp	r22, r18
     5d2:	73 07       	cpc	r23, r19
     5d4:	0c f4       	brge	.+2      	; 0x5d8 <_ZN5Servo17writeMicrosecondsEi+0x42>
     5d6:	9b 01       	movw	r18, r22
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     5d8:	22 50       	subi	r18, 0x02	; 2
     5da:	31 09       	sbc	r19, r1
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     5dc:	22 0f       	add	r18, r18
     5de:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
     5e0:	4f b7       	in	r20, 0x3f	; 63
    cli();
     5e2:	f8 94       	cli
    servos[channel].ticks = value;
     5e4:	89 2f       	mov	r24, r25
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	8e 0f       	add	r24, r30
     5f0:	9f 1f       	adc	r25, r31
     5f2:	fc 01       	movw	r30, r24
     5f4:	e6 5b       	subi	r30, 0xB6	; 182
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	32 83       	std	Z+2, r19	; 0x02
     5fa:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
     5fc:	4f bf       	out	0x3f, r20	; 63
     5fe:	08 95       	ret

00000600 <twi_transmit>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     600:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <twi_txBufferLength>
     604:	26 2f       	mov	r18, r22
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	24 0f       	add	r18, r20
     60a:	31 1d       	adc	r19, r1
     60c:	21 32       	cpi	r18, 0x21	; 33
     60e:	31 05       	cpc	r19, r1
     610:	dc f4       	brge	.+54     	; 0x648 <twi_transmit+0x48>
     612:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <twi_state>
     616:	24 30       	cpi	r18, 0x04	; 4
     618:	c9 f4       	brne	.+50     	; 0x64c <twi_transmit+0x4c>
     61a:	fc 01       	movw	r30, r24
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	86 17       	cp	r24, r22
     622:	58 f4       	brcc	.+22     	; 0x63a <twi_transmit+0x3a>
     624:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <twi_txBufferLength>
     628:	21 91       	ld	r18, Z+
     62a:	dc 01       	movw	r26, r24
     62c:	ae 56       	subi	r26, 0x6E	; 110
     62e:	be 4f       	sbci	r27, 0xFE	; 254
     630:	a3 0f       	add	r26, r19
     632:	b1 1d       	adc	r27, r1
     634:	2c 93       	st	X, r18
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	f3 cf       	rjmp	.-26     	; 0x620 <twi_transmit+0x20>
     63a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_txBufferLength>
     63e:	68 0f       	add	r22, r24
     640:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <twi_txBufferLength>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	08 95       	ret
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	08 95       	ret

00000650 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     650:	85 ed       	ldi	r24, 0xD5	; 213
     652:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     656:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     65a:	84 fd       	sbrc	r24, 4
     65c:	fc cf       	rjmp	.-8      	; 0x656 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     65e:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
     662:	08 95       	ret

00000664 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     664:	85 ec       	ldi	r24, 0xC5	; 197
     666:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     66a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
     66e:	08 95       	ret

00000670 <__vector_24>:
}

ISR(TWI_vect)
{
     670:	1f 92       	push	r1
     672:	0f 92       	push	r0
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	0f 92       	push	r0
     678:	11 24       	eor	r1, r1
     67a:	2f 93       	push	r18
     67c:	3f 93       	push	r19
     67e:	4f 93       	push	r20
     680:	5f 93       	push	r21
     682:	6f 93       	push	r22
     684:	7f 93       	push	r23
     686:	8f 93       	push	r24
     688:	9f 93       	push	r25
     68a:	af 93       	push	r26
     68c:	bf 93       	push	r27
     68e:	ef 93       	push	r30
     690:	ff 93       	push	r31
  switch(TW_STATUS){
     692:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     696:	88 7f       	andi	r24, 0xF8	; 248
     698:	80 36       	cpi	r24, 0x60	; 96
     69a:	09 f4       	brne	.+2      	; 0x69e <__vector_24+0x2e>
     69c:	9e c0       	rjmp	.+316    	; 0x7da <__vector_24+0x16a>
     69e:	78 f5       	brcc	.+94     	; 0x6fe <__vector_24+0x8e>
     6a0:	88 32       	cpi	r24, 0x28	; 40
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <__vector_24+0x36>
     6a4:	5d c0       	rjmp	.+186    	; 0x760 <__vector_24+0xf0>
     6a6:	90 f4       	brcc	.+36     	; 0x6cc <__vector_24+0x5c>
     6a8:	80 31       	cpi	r24, 0x10	; 16
     6aa:	09 f4       	brne	.+2      	; 0x6ae <__vector_24+0x3e>
     6ac:	56 c0       	rjmp	.+172    	; 0x75a <__vector_24+0xea>
     6ae:	38 f4       	brcc	.+14     	; 0x6be <__vector_24+0x4e>
     6b0:	88 23       	and	r24, r24
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <__vector_24+0x46>
     6b4:	f5 c0       	rjmp	.+490    	; 0x8a0 <__vector_24+0x230>
     6b6:	88 30       	cpi	r24, 0x08	; 8
     6b8:	09 f4       	brne	.+2      	; 0x6bc <__vector_24+0x4c>
     6ba:	4f c0       	rjmp	.+158    	; 0x75a <__vector_24+0xea>
     6bc:	f5 c0       	rjmp	.+490    	; 0x8a8 <__vector_24+0x238>
     6be:	88 31       	cpi	r24, 0x18	; 24
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <__vector_24+0x54>
     6c2:	4e c0       	rjmp	.+156    	; 0x760 <__vector_24+0xf0>
     6c4:	80 32       	cpi	r24, 0x20	; 32
     6c6:	09 f4       	brne	.+2      	; 0x6ca <__vector_24+0x5a>
     6c8:	5f c0       	rjmp	.+190    	; 0x788 <__vector_24+0x118>
     6ca:	ee c0       	rjmp	.+476    	; 0x8a8 <__vector_24+0x238>
     6cc:	80 34       	cpi	r24, 0x40	; 64
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <__vector_24+0x62>
     6d0:	6a c0       	rjmp	.+212    	; 0x7a6 <__vector_24+0x136>
     6d2:	58 f4       	brcc	.+22     	; 0x6ea <__vector_24+0x7a>
     6d4:	80 33       	cpi	r24, 0x30	; 48
     6d6:	09 f4       	brne	.+2      	; 0x6da <__vector_24+0x6a>
     6d8:	57 c0       	rjmp	.+174    	; 0x788 <__vector_24+0x118>
     6da:	88 33       	cpi	r24, 0x38	; 56
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_24+0x70>
     6de:	e4 c0       	rjmp	.+456    	; 0x8a8 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     6e0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <twi_error>
      twi_releaseBus();
     6e4:	0e 94 32 03 	call	0x664	; 0x664 <twi_releaseBus>
      break;
     6e8:	df c0       	rjmp	.+446    	; 0x8a8 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     6ea:	80 35       	cpi	r24, 0x50	; 80
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <__vector_24+0x80>
     6ee:	4f c0       	rjmp	.+158    	; 0x78e <__vector_24+0x11e>
     6f0:	88 35       	cpi	r24, 0x58	; 88
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <__vector_24+0x86>
     6f4:	5d c0       	rjmp	.+186    	; 0x7b0 <__vector_24+0x140>
     6f6:	88 34       	cpi	r24, 0x48	; 72
     6f8:	09 f0       	breq	.+2      	; 0x6fc <__vector_24+0x8c>
     6fa:	d6 c0       	rjmp	.+428    	; 0x8a8 <__vector_24+0x238>
     6fc:	d3 c0       	rjmp	.+422    	; 0x8a4 <__vector_24+0x234>
     6fe:	88 39       	cpi	r24, 0x98	; 152
     700:	09 f4       	brne	.+2      	; 0x704 <__vector_24+0x94>
     702:	c4 c0       	rjmp	.+392    	; 0x88c <__vector_24+0x21c>
     704:	a8 f4       	brcc	.+42     	; 0x730 <__vector_24+0xc0>
     706:	88 37       	cpi	r24, 0x78	; 120
     708:	09 f4       	brne	.+2      	; 0x70c <__vector_24+0x9c>
     70a:	67 c0       	rjmp	.+206    	; 0x7da <__vector_24+0x16a>
     70c:	38 f4       	brcc	.+14     	; 0x71c <__vector_24+0xac>
     70e:	88 36       	cpi	r24, 0x68	; 104
     710:	09 f4       	brne	.+2      	; 0x714 <__vector_24+0xa4>
     712:	63 c0       	rjmp	.+198    	; 0x7da <__vector_24+0x16a>
     714:	80 37       	cpi	r24, 0x70	; 112
     716:	09 f4       	brne	.+2      	; 0x71a <__vector_24+0xaa>
     718:	60 c0       	rjmp	.+192    	; 0x7da <__vector_24+0x16a>
     71a:	c6 c0       	rjmp	.+396    	; 0x8a8 <__vector_24+0x238>
     71c:	88 38       	cpi	r24, 0x88	; 136
     71e:	09 f4       	brne	.+2      	; 0x722 <__vector_24+0xb2>
     720:	b5 c0       	rjmp	.+362    	; 0x88c <__vector_24+0x21c>
     722:	80 39       	cpi	r24, 0x90	; 144
     724:	09 f4       	brne	.+2      	; 0x728 <__vector_24+0xb8>
     726:	5f c0       	rjmp	.+190    	; 0x7e6 <__vector_24+0x176>
     728:	80 38       	cpi	r24, 0x80	; 128
     72a:	09 f0       	breq	.+2      	; 0x72e <__vector_24+0xbe>
     72c:	bd c0       	rjmp	.+378    	; 0x8a8 <__vector_24+0x238>
     72e:	5b c0       	rjmp	.+182    	; 0x7e6 <__vector_24+0x176>
     730:	80 3b       	cpi	r24, 0xB0	; 176
     732:	09 f4       	brne	.+2      	; 0x736 <__vector_24+0xc6>
     734:	83 c0       	rjmp	.+262    	; 0x83c <__vector_24+0x1cc>
     736:	38 f4       	brcc	.+14     	; 0x746 <__vector_24+0xd6>
     738:	80 3a       	cpi	r24, 0xA0	; 160
     73a:	09 f4       	brne	.+2      	; 0x73e <__vector_24+0xce>
     73c:	66 c0       	rjmp	.+204    	; 0x80a <__vector_24+0x19a>
     73e:	88 3a       	cpi	r24, 0xA8	; 168
     740:	09 f4       	brne	.+2      	; 0x744 <__vector_24+0xd4>
     742:	7c c0       	rjmp	.+248    	; 0x83c <__vector_24+0x1cc>
     744:	b1 c0       	rjmp	.+354    	; 0x8a8 <__vector_24+0x238>
     746:	80 3c       	cpi	r24, 0xC0	; 192
     748:	09 f4       	brne	.+2      	; 0x74c <__vector_24+0xdc>
     74a:	a4 c0       	rjmp	.+328    	; 0x894 <__vector_24+0x224>
     74c:	88 3c       	cpi	r24, 0xC8	; 200
     74e:	09 f4       	brne	.+2      	; 0x752 <__vector_24+0xe2>
     750:	a1 c0       	rjmp	.+322    	; 0x894 <__vector_24+0x224>
     752:	88 3b       	cpi	r24, 0xB8	; 184
     754:	09 f4       	brne	.+2      	; 0x758 <__vector_24+0xe8>
     756:	87 c0       	rjmp	.+270    	; 0x866 <__vector_24+0x1f6>
     758:	a7 c0       	rjmp	.+334    	; 0x8a8 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     75a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <twi_slarw>
     75e:	10 c0       	rjmp	.+32     	; 0x780 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     760:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
     764:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <twi_masterBufferLength>
     768:	98 17       	cp	r25, r24
     76a:	70 f5       	brcc	.+92     	; 0x7c8 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     76c:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	8e 0f       	add	r24, r30
     774:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_masterBufferIndex>
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ec 54       	subi	r30, 0x4C	; 76
     77c:	fe 4f       	sbci	r31, 0xFE	; 254
     77e:	80 81       	ld	r24, Z
     780:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     784:	85 ec       	ldi	r24, 0xC5	; 197
     786:	83 c0       	rjmp	.+262    	; 0x88e <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     788:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <twi_error>
     78c:	8b c0       	rjmp	.+278    	; 0x8a4 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     78e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	8e 0f       	add	r24, r30
     796:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_masterBufferIndex>
     79a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	ec 54       	subi	r30, 0x4C	; 76
     7a2:	fe 4f       	sbci	r31, 0xFE	; 254
     7a4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     7a6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
     7aa:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <twi_masterBufferLength>
     7ae:	6b c0       	rjmp	.+214    	; 0x886 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     7b0:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <twi_masterBufferIndex>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	8e 0f       	add	r24, r30
     7b8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <twi_masterBufferIndex>
     7bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	ec 54       	subi	r30, 0x4C	; 76
     7c4:	fe 4f       	sbci	r31, 0xFE	; 254
     7c6:	80 83       	st	Z, r24
	if (twi_sendStop)
     7c8:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <twi_sendStop>
     7cc:	81 11       	cpse	r24, r1
     7ce:	6a c0       	rjmp	.+212    	; 0x8a4 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     7d6:	84 ea       	ldi	r24, 0xA4	; 164
     7d8:	5e c0       	rjmp	.+188    	; 0x896 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     7e0:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <twi_rxBufferIndex>
     7e4:	cf cf       	rjmp	.-98     	; 0x784 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     7e6:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <twi_rxBufferIndex>
     7ea:	80 32       	cpi	r24, 0x20	; 32
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <__vector_24+0x180>
     7ee:	4e c0       	rjmp	.+156    	; 0x88c <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     7f0:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <twi_rxBufferIndex>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	8e 0f       	add	r24, r30
     7f8:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <twi_rxBufferIndex>
     7fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	e0 59       	subi	r30, 0x90	; 144
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	80 83       	st	Z, r24
     808:	bd cf       	rjmp	.-134    	; 0x784 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     80a:	0e 94 32 03 	call	0x664	; 0x664 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     80e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <twi_rxBufferIndex>
     812:	80 32       	cpi	r24, 0x20	; 32
     814:	30 f4       	brcc	.+12     	; 0x822 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     816:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <twi_rxBufferIndex>
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	e0 59       	subi	r30, 0x90	; 144
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     822:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <twi_rxBufferIndex>
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <twi_onSlaveReceive>
     82c:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <twi_onSlaveReceive+0x1>
     830:	80 e7       	ldi	r24, 0x70	; 112
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     836:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <twi_rxBufferIndex>
      break;
     83a:	36 c0       	rjmp	.+108    	; 0x8a8 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     842:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     846:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     84a:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <twi_onSlaveTransmit>
     84e:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <twi_onSlaveTransmit+0x1>
     852:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     854:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_txBufferLength>
     858:	81 11       	cpse	r24, r1
     85a:	05 c0       	rjmp	.+10     	; 0x866 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     862:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     866:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <twi_txBufferIndex>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8e 0f       	add	r24, r30
     86e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <twi_txBufferIndex>
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	ee 56       	subi	r30, 0x6E	; 110
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	80 81       	ld	r24, Z
     87a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     87e:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <twi_txBufferIndex>
     882:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <twi_txBufferLength>
     886:	98 17       	cp	r25, r24
     888:	08 f4       	brcc	.+2      	; 0x88c <__vector_24+0x21c>
     88a:	7c cf       	rjmp	.-264    	; 0x784 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     88c:	85 e8       	ldi	r24, 0x85	; 133
     88e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     894:	85 ec       	ldi	r24, 0xC5	; 197
     896:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     89a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_state>
      break;
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     8a0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <twi_error>
      twi_stop();
     8a4:	0e 94 28 03 	call	0x650	; 0x650 <twi_stop>
      break;
  }
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <_ZN5Print17availableForWriteEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	08 95       	ret

000008d0 <_ZN7TwoWire9availableEv>:
     8d0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN7TwoWire14rxBufferLengthE>
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <_ZN7TwoWire13rxBufferIndexE>
     8da:	82 1b       	sub	r24, r18
     8dc:	91 09       	sbc	r25, r1
     8de:	08 95       	ret

000008e0 <_ZN7TwoWire4readEv>:
     8e0:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_ZN7TwoWire13rxBufferIndexE>
     8e4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN7TwoWire14rxBufferLengthE>
     8e8:	98 17       	cp	r25, r24
     8ea:	50 f4       	brcc	.+20     	; 0x900 <__stack+0x1>
     8ec:	e9 2f       	mov	r30, r25
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	e3 5f       	subi	r30, 0xF3	; 243
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	20 81       	ld	r18, Z
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	9f 5f       	subi	r25, 0xFF	; 255
     8fa:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_ZN7TwoWire13rxBufferIndexE>
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	3f ef       	ldi	r19, 0xFF	; 255
     904:	c9 01       	movw	r24, r18
     906:	08 95       	ret

00000908 <_ZN7TwoWire4peekEv>:
     908:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <_ZN7TwoWire13rxBufferIndexE>
     90c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_ZN7TwoWire14rxBufferLengthE>
     910:	e8 17       	cp	r30, r24
     912:	30 f4       	brcc	.+12     	; 0x920 <_ZN7TwoWire4peekEv+0x18>
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	e3 5f       	subi	r30, 0xF3	; 243
     918:	fd 4f       	sbci	r31, 0xFD	; 253
     91a:	80 81       	ld	r24, Z
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	08 95       	ret
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	08 95       	ret

00000926 <_ZN7TwoWire5flushEv>:
     926:	08 95       	ret

00000928 <_ZN7TwoWire5writeEPKhj>:
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	7c 01       	movw	r14, r24
     93a:	26 2f       	mov	r18, r22
     93c:	97 2f       	mov	r25, r23
     93e:	8a 01       	movw	r16, r20
     940:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <_ZN7TwoWire12transmittingE>
     944:	88 23       	and	r24, r24
     946:	91 f0       	breq	.+36     	; 0x96c <_ZN7TwoWire5writeEPKhj+0x44>
     948:	c6 2f       	mov	r28, r22
     94a:	d7 2f       	mov	r29, r23
     94c:	6e 01       	movw	r12, r28
     94e:	c4 0e       	add	r12, r20
     950:	d5 1e       	adc	r13, r21
     952:	cc 15       	cp	r28, r12
     954:	dd 05       	cpc	r29, r13
     956:	71 f0       	breq	.+28     	; 0x974 <_ZN7TwoWire5writeEPKhj+0x4c>
     958:	69 91       	ld	r22, Y+
     95a:	d7 01       	movw	r26, r14
     95c:	ed 91       	ld	r30, X+
     95e:	fc 91       	ld	r31, X
     960:	01 90       	ld	r0, Z+
     962:	f0 81       	ld	r31, Z
     964:	e0 2d       	mov	r30, r0
     966:	c7 01       	movw	r24, r14
     968:	09 95       	icall
     96a:	f3 cf       	rjmp	.-26     	; 0x952 <_ZN7TwoWire5writeEPKhj+0x2a>
     96c:	64 2f       	mov	r22, r20
     96e:	82 2f       	mov	r24, r18
     970:	0e 94 00 03 	call	0x600	; 0x600 <twi_transmit>
     974:	c8 01       	movw	r24, r16
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	08 95       	ret

00000988 <_ZN7TwoWire5writeEh>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	1f 92       	push	r1
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	69 83       	std	Y+1, r22	; 0x01
     994:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <_ZN7TwoWire12transmittingE>
     998:	22 23       	and	r18, r18
     99a:	d1 f0       	breq	.+52     	; 0x9d0 <_ZN7TwoWire5writeEh+0x48>
     99c:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
     9a0:	20 32       	cpi	r18, 0x20	; 32
     9a2:	40 f0       	brcs	.+16     	; 0x9b4 <_ZN7TwoWire5writeEh+0x2c>
     9a4:	21 e0       	ldi	r18, 0x01	; 1
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	fc 01       	movw	r30, r24
     9aa:	33 83       	std	Z+3, r19	; 0x03
     9ac:	22 83       	std	Z+2, r18	; 0x02
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	15 c0       	rjmp	.+42     	; 0x9de <_ZN7TwoWire5writeEh+0x56>
     9b4:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
     9b8:	e8 2f       	mov	r30, r24
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	e5 51       	subi	r30, 0x15	; 21
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	99 81       	ldd	r25, Y+1	; 0x01
     9c2:	90 83       	st	Z, r25
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <_ZN7TwoWire13txBufferIndexE>
     9ca:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <_ZN7TwoWire14txBufferLengthE>
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <_ZN7TwoWire5writeEh+0x52>
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	0e 94 00 03 	call	0x600	; 0x600 <twi_transmit>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <_ZN7TwoWireC1Ev>:
     9e6:	fc 01       	movw	r30, r24
     9e8:	13 82       	std	Z+3, r1	; 0x03
     9ea:	12 82       	std	Z+2, r1	; 0x02
     9ec:	88 ee       	ldi	r24, 0xE8	; 232
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	84 83       	std	Z+4, r24	; 0x04
     9f6:	95 83       	std	Z+5, r25	; 0x05
     9f8:	a6 83       	std	Z+6, r26	; 0x06
     9fa:	b7 83       	std	Z+7, r27	; 0x07
     9fc:	82 e1       	ldi	r24, 0x12	; 18
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	91 83       	std	Z+1, r25	; 0x01
     a02:	80 83       	st	Z, r24
     a04:	08 95       	ret

00000a06 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     a06:	8c ed       	ldi	r24, 0xDC	; 220
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN7TwoWireC1Ev>

00000a0e <__subsf3>:
     a0e:	50 58       	subi	r21, 0x80	; 128

00000a10 <__addsf3>:
     a10:	bb 27       	eor	r27, r27
     a12:	aa 27       	eor	r26, r26
     a14:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__addsf3x>
     a18:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_round>
     a1c:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fp_pscA>
     a20:	38 f0       	brcs	.+14     	; 0xa30 <__addsf3+0x20>
     a22:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_pscB>
     a26:	20 f0       	brcs	.+8      	; 0xa30 <__addsf3+0x20>
     a28:	39 f4       	brne	.+14     	; 0xa38 <__addsf3+0x28>
     a2a:	9f 3f       	cpi	r25, 0xFF	; 255
     a2c:	19 f4       	brne	.+6      	; 0xa34 <__addsf3+0x24>
     a2e:	26 f4       	brtc	.+8      	; 0xa38 <__addsf3+0x28>
     a30:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_nan>
     a34:	0e f4       	brtc	.+2      	; 0xa38 <__addsf3+0x28>
     a36:	e0 95       	com	r30
     a38:	e7 fb       	bst	r30, 7
     a3a:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_inf>

00000a3e <__addsf3x>:
     a3e:	e9 2f       	mov	r30, r25
     a40:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_split3>
     a44:	58 f3       	brcs	.-42     	; 0xa1c <__addsf3+0xc>
     a46:	ba 17       	cp	r27, r26
     a48:	62 07       	cpc	r22, r18
     a4a:	73 07       	cpc	r23, r19
     a4c:	84 07       	cpc	r24, r20
     a4e:	95 07       	cpc	r25, r21
     a50:	20 f0       	brcs	.+8      	; 0xa5a <__addsf3x+0x1c>
     a52:	79 f4       	brne	.+30     	; 0xa72 <__addsf3x+0x34>
     a54:	a6 f5       	brtc	.+104    	; 0xabe <__addsf3x+0x80>
     a56:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_zero>
     a5a:	0e f4       	brtc	.+2      	; 0xa5e <__addsf3x+0x20>
     a5c:	e0 95       	com	r30
     a5e:	0b 2e       	mov	r0, r27
     a60:	ba 2f       	mov	r27, r26
     a62:	a0 2d       	mov	r26, r0
     a64:	0b 01       	movw	r0, r22
     a66:	b9 01       	movw	r22, r18
     a68:	90 01       	movw	r18, r0
     a6a:	0c 01       	movw	r0, r24
     a6c:	ca 01       	movw	r24, r20
     a6e:	a0 01       	movw	r20, r0
     a70:	11 24       	eor	r1, r1
     a72:	ff 27       	eor	r31, r31
     a74:	59 1b       	sub	r21, r25
     a76:	99 f0       	breq	.+38     	; 0xa9e <__addsf3x+0x60>
     a78:	59 3f       	cpi	r21, 0xF9	; 249
     a7a:	50 f4       	brcc	.+20     	; 0xa90 <__addsf3x+0x52>
     a7c:	50 3e       	cpi	r21, 0xE0	; 224
     a7e:	68 f1       	brcs	.+90     	; 0xada <__addsf3x+0x9c>
     a80:	1a 16       	cp	r1, r26
     a82:	f0 40       	sbci	r31, 0x00	; 0
     a84:	a2 2f       	mov	r26, r18
     a86:	23 2f       	mov	r18, r19
     a88:	34 2f       	mov	r19, r20
     a8a:	44 27       	eor	r20, r20
     a8c:	58 5f       	subi	r21, 0xF8	; 248
     a8e:	f3 cf       	rjmp	.-26     	; 0xa76 <__addsf3x+0x38>
     a90:	46 95       	lsr	r20
     a92:	37 95       	ror	r19
     a94:	27 95       	ror	r18
     a96:	a7 95       	ror	r26
     a98:	f0 40       	sbci	r31, 0x00	; 0
     a9a:	53 95       	inc	r21
     a9c:	c9 f7       	brne	.-14     	; 0xa90 <__addsf3x+0x52>
     a9e:	7e f4       	brtc	.+30     	; 0xabe <__addsf3x+0x80>
     aa0:	1f 16       	cp	r1, r31
     aa2:	ba 0b       	sbc	r27, r26
     aa4:	62 0b       	sbc	r22, r18
     aa6:	73 0b       	sbc	r23, r19
     aa8:	84 0b       	sbc	r24, r20
     aaa:	ba f0       	brmi	.+46     	; 0xada <__addsf3x+0x9c>
     aac:	91 50       	subi	r25, 0x01	; 1
     aae:	a1 f0       	breq	.+40     	; 0xad8 <__addsf3x+0x9a>
     ab0:	ff 0f       	add	r31, r31
     ab2:	bb 1f       	adc	r27, r27
     ab4:	66 1f       	adc	r22, r22
     ab6:	77 1f       	adc	r23, r23
     ab8:	88 1f       	adc	r24, r24
     aba:	c2 f7       	brpl	.-16     	; 0xaac <__addsf3x+0x6e>
     abc:	0e c0       	rjmp	.+28     	; 0xada <__addsf3x+0x9c>
     abe:	ba 0f       	add	r27, r26
     ac0:	62 1f       	adc	r22, r18
     ac2:	73 1f       	adc	r23, r19
     ac4:	84 1f       	adc	r24, r20
     ac6:	48 f4       	brcc	.+18     	; 0xada <__addsf3x+0x9c>
     ac8:	87 95       	ror	r24
     aca:	77 95       	ror	r23
     acc:	67 95       	ror	r22
     ace:	b7 95       	ror	r27
     ad0:	f7 95       	ror	r31
     ad2:	9e 3f       	cpi	r25, 0xFE	; 254
     ad4:	08 f0       	brcs	.+2      	; 0xad8 <__addsf3x+0x9a>
     ad6:	b0 cf       	rjmp	.-160    	; 0xa38 <__addsf3+0x28>
     ad8:	93 95       	inc	r25
     ada:	88 0f       	add	r24, r24
     adc:	08 f0       	brcs	.+2      	; 0xae0 <__addsf3x+0xa2>
     ade:	99 27       	eor	r25, r25
     ae0:	ee 0f       	add	r30, r30
     ae2:	97 95       	ror	r25
     ae4:	87 95       	ror	r24
     ae6:	08 95       	ret

00000ae8 <__cmpsf2>:
     ae8:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_cmp>
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <__cmpsf2+0x8>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	08 95       	ret

00000af2 <__divsf3>:
     af2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__divsf3x>
     af6:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_round>
     afa:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_pscB>
     afe:	58 f0       	brcs	.+22     	; 0xb16 <__divsf3+0x24>
     b00:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fp_pscA>
     b04:	40 f0       	brcs	.+16     	; 0xb16 <__divsf3+0x24>
     b06:	29 f4       	brne	.+10     	; 0xb12 <__divsf3+0x20>
     b08:	5f 3f       	cpi	r21, 0xFF	; 255
     b0a:	29 f0       	breq	.+10     	; 0xb16 <__divsf3+0x24>
     b0c:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_inf>
     b10:	51 11       	cpse	r21, r1
     b12:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>
     b16:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_nan>

00000b1a <__divsf3x>:
     b1a:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_split3>
     b1e:	68 f3       	brcs	.-38     	; 0xafa <__divsf3+0x8>

00000b20 <__divsf3_pse>:
     b20:	99 23       	and	r25, r25
     b22:	b1 f3       	breq	.-20     	; 0xb10 <__divsf3+0x1e>
     b24:	55 23       	and	r21, r21
     b26:	91 f3       	breq	.-28     	; 0xb0c <__divsf3+0x1a>
     b28:	95 1b       	sub	r25, r21
     b2a:	55 0b       	sbc	r21, r21
     b2c:	bb 27       	eor	r27, r27
     b2e:	aa 27       	eor	r26, r26
     b30:	62 17       	cp	r22, r18
     b32:	73 07       	cpc	r23, r19
     b34:	84 07       	cpc	r24, r20
     b36:	38 f0       	brcs	.+14     	; 0xb46 <__divsf3_pse+0x26>
     b38:	9f 5f       	subi	r25, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	44 1f       	adc	r20, r20
     b42:	aa 1f       	adc	r26, r26
     b44:	a9 f3       	breq	.-22     	; 0xb30 <__divsf3_pse+0x10>
     b46:	35 d0       	rcall	.+106    	; 0xbb2 <__divsf3_pse+0x92>
     b48:	0e 2e       	mov	r0, r30
     b4a:	3a f0       	brmi	.+14     	; 0xb5a <__divsf3_pse+0x3a>
     b4c:	e0 e8       	ldi	r30, 0x80	; 128
     b4e:	32 d0       	rcall	.+100    	; 0xbb4 <__divsf3_pse+0x94>
     b50:	91 50       	subi	r25, 0x01	; 1
     b52:	50 40       	sbci	r21, 0x00	; 0
     b54:	e6 95       	lsr	r30
     b56:	00 1c       	adc	r0, r0
     b58:	ca f7       	brpl	.-14     	; 0xb4c <__divsf3_pse+0x2c>
     b5a:	2b d0       	rcall	.+86     	; 0xbb2 <__divsf3_pse+0x92>
     b5c:	fe 2f       	mov	r31, r30
     b5e:	29 d0       	rcall	.+82     	; 0xbb2 <__divsf3_pse+0x92>
     b60:	66 0f       	add	r22, r22
     b62:	77 1f       	adc	r23, r23
     b64:	88 1f       	adc	r24, r24
     b66:	bb 1f       	adc	r27, r27
     b68:	26 17       	cp	r18, r22
     b6a:	37 07       	cpc	r19, r23
     b6c:	48 07       	cpc	r20, r24
     b6e:	ab 07       	cpc	r26, r27
     b70:	b0 e8       	ldi	r27, 0x80	; 128
     b72:	09 f0       	breq	.+2      	; 0xb76 <__divsf3_pse+0x56>
     b74:	bb 0b       	sbc	r27, r27
     b76:	80 2d       	mov	r24, r0
     b78:	bf 01       	movw	r22, r30
     b7a:	ff 27       	eor	r31, r31
     b7c:	93 58       	subi	r25, 0x83	; 131
     b7e:	5f 4f       	sbci	r21, 0xFF	; 255
     b80:	3a f0       	brmi	.+14     	; 0xb90 <__divsf3_pse+0x70>
     b82:	9e 3f       	cpi	r25, 0xFE	; 254
     b84:	51 05       	cpc	r21, r1
     b86:	78 f0       	brcs	.+30     	; 0xba6 <__divsf3_pse+0x86>
     b88:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_inf>
     b8c:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>
     b90:	5f 3f       	cpi	r21, 0xFF	; 255
     b92:	e4 f3       	brlt	.-8      	; 0xb8c <__divsf3_pse+0x6c>
     b94:	98 3e       	cpi	r25, 0xE8	; 232
     b96:	d4 f3       	brlt	.-12     	; 0xb8c <__divsf3_pse+0x6c>
     b98:	86 95       	lsr	r24
     b9a:	77 95       	ror	r23
     b9c:	67 95       	ror	r22
     b9e:	b7 95       	ror	r27
     ba0:	f7 95       	ror	r31
     ba2:	9f 5f       	subi	r25, 0xFF	; 255
     ba4:	c9 f7       	brne	.-14     	; 0xb98 <__divsf3_pse+0x78>
     ba6:	88 0f       	add	r24, r24
     ba8:	91 1d       	adc	r25, r1
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	97 f9       	bld	r25, 7
     bb0:	08 95       	ret
     bb2:	e1 e0       	ldi	r30, 0x01	; 1
     bb4:	66 0f       	add	r22, r22
     bb6:	77 1f       	adc	r23, r23
     bb8:	88 1f       	adc	r24, r24
     bba:	bb 1f       	adc	r27, r27
     bbc:	62 17       	cp	r22, r18
     bbe:	73 07       	cpc	r23, r19
     bc0:	84 07       	cpc	r24, r20
     bc2:	ba 07       	cpc	r27, r26
     bc4:	20 f0       	brcs	.+8      	; 0xbce <__divsf3_pse+0xae>
     bc6:	62 1b       	sub	r22, r18
     bc8:	73 0b       	sbc	r23, r19
     bca:	84 0b       	sbc	r24, r20
     bcc:	ba 0b       	sbc	r27, r26
     bce:	ee 1f       	adc	r30, r30
     bd0:	88 f7       	brcc	.-30     	; 0xbb4 <__divsf3_pse+0x94>
     bd2:	e0 95       	com	r30
     bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
     bd6:	e8 94       	clt
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
     bda:	97 fb       	bst	r25, 7
     bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
     bde:	90 95       	com	r25
     be0:	80 95       	com	r24
     be2:	70 95       	com	r23
     be4:	61 95       	neg	r22
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	99 23       	and	r25, r25
     bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
     bf0:	f9 2f       	mov	r31, r25
     bf2:	96 e9       	ldi	r25, 0x96	; 150
     bf4:	bb 27       	eor	r27, r27
     bf6:	93 95       	inc	r25
     bf8:	f6 95       	lsr	r31
     bfa:	87 95       	ror	r24
     bfc:	77 95       	ror	r23
     bfe:	67 95       	ror	r22
     c00:	b7 95       	ror	r27
     c02:	f1 11       	cpse	r31, r1
     c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
     c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
     c08:	bb 0f       	add	r27, r27
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
     c0c:	60 ff       	sbrs	r22, 0
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
     c1a:	88 23       	and	r24, r24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
     c22:	77 23       	and	r23, r23
     c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
     c26:	9e e8       	ldi	r25, 0x8E	; 142
     c28:	87 2f       	mov	r24, r23
     c2a:	76 2f       	mov	r23, r22
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
     c2e:	66 23       	and	r22, r22
     c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
     c32:	96 e8       	ldi	r25, 0x86	; 134
     c34:	86 2f       	mov	r24, r22
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
     c3c:	9a 95       	dec	r25
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
     c46:	88 0f       	add	r24, r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <__fp_cmp>:
     c50:	99 0f       	add	r25, r25
     c52:	00 08       	sbc	r0, r0
     c54:	55 0f       	add	r21, r21
     c56:	aa 0b       	sbc	r26, r26
     c58:	e0 e8       	ldi	r30, 0x80	; 128
     c5a:	fe ef       	ldi	r31, 0xFE	; 254
     c5c:	16 16       	cp	r1, r22
     c5e:	17 06       	cpc	r1, r23
     c60:	e8 07       	cpc	r30, r24
     c62:	f9 07       	cpc	r31, r25
     c64:	c0 f0       	brcs	.+48     	; 0xc96 <__fp_cmp+0x46>
     c66:	12 16       	cp	r1, r18
     c68:	13 06       	cpc	r1, r19
     c6a:	e4 07       	cpc	r30, r20
     c6c:	f5 07       	cpc	r31, r21
     c6e:	98 f0       	brcs	.+38     	; 0xc96 <__fp_cmp+0x46>
     c70:	62 1b       	sub	r22, r18
     c72:	73 0b       	sbc	r23, r19
     c74:	84 0b       	sbc	r24, r20
     c76:	95 0b       	sbc	r25, r21
     c78:	39 f4       	brne	.+14     	; 0xc88 <__fp_cmp+0x38>
     c7a:	0a 26       	eor	r0, r26
     c7c:	61 f0       	breq	.+24     	; 0xc96 <__fp_cmp+0x46>
     c7e:	23 2b       	or	r18, r19
     c80:	24 2b       	or	r18, r20
     c82:	25 2b       	or	r18, r21
     c84:	21 f4       	brne	.+8      	; 0xc8e <__fp_cmp+0x3e>
     c86:	08 95       	ret
     c88:	0a 26       	eor	r0, r26
     c8a:	09 f4       	brne	.+2      	; 0xc8e <__fp_cmp+0x3e>
     c8c:	a1 40       	sbci	r26, 0x01	; 1
     c8e:	a6 95       	lsr	r26
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	81 1d       	adc	r24, r1
     c94:	81 1d       	adc	r24, r1
     c96:	08 95       	ret

00000c98 <__fp_inf>:
     c98:	97 f9       	bld	r25, 7
     c9a:	9f 67       	ori	r25, 0x7F	; 127
     c9c:	80 e8       	ldi	r24, 0x80	; 128
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	08 95       	ret

00000ca4 <__fp_nan>:
     ca4:	9f ef       	ldi	r25, 0xFF	; 255
     ca6:	80 ec       	ldi	r24, 0xC0	; 192
     ca8:	08 95       	ret

00000caa <__fp_pscA>:
     caa:	00 24       	eor	r0, r0
     cac:	0a 94       	dec	r0
     cae:	16 16       	cp	r1, r22
     cb0:	17 06       	cpc	r1, r23
     cb2:	18 06       	cpc	r1, r24
     cb4:	09 06       	cpc	r0, r25
     cb6:	08 95       	ret

00000cb8 <__fp_pscB>:
     cb8:	00 24       	eor	r0, r0
     cba:	0a 94       	dec	r0
     cbc:	12 16       	cp	r1, r18
     cbe:	13 06       	cpc	r1, r19
     cc0:	14 06       	cpc	r1, r20
     cc2:	05 06       	cpc	r0, r21
     cc4:	08 95       	ret

00000cc6 <__fp_round>:
     cc6:	09 2e       	mov	r0, r25
     cc8:	03 94       	inc	r0
     cca:	00 0c       	add	r0, r0
     ccc:	11 f4       	brne	.+4      	; 0xcd2 <__fp_round+0xc>
     cce:	88 23       	and	r24, r24
     cd0:	52 f0       	brmi	.+20     	; 0xce6 <__fp_round+0x20>
     cd2:	bb 0f       	add	r27, r27
     cd4:	40 f4       	brcc	.+16     	; 0xce6 <__fp_round+0x20>
     cd6:	bf 2b       	or	r27, r31
     cd8:	11 f4       	brne	.+4      	; 0xcde <__fp_round+0x18>
     cda:	60 ff       	sbrs	r22, 0
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <__fp_round+0x20>
     cde:	6f 5f       	subi	r22, 0xFF	; 255
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	8f 4f       	sbci	r24, 0xFF	; 255
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	08 95       	ret

00000ce8 <__fp_split3>:
     ce8:	57 fd       	sbrc	r21, 7
     cea:	90 58       	subi	r25, 0x80	; 128
     cec:	44 0f       	add	r20, r20
     cee:	55 1f       	adc	r21, r21
     cf0:	59 f0       	breq	.+22     	; 0xd08 <__fp_splitA+0x10>
     cf2:	5f 3f       	cpi	r21, 0xFF	; 255
     cf4:	71 f0       	breq	.+28     	; 0xd12 <__fp_splitA+0x1a>
     cf6:	47 95       	ror	r20

00000cf8 <__fp_splitA>:
     cf8:	88 0f       	add	r24, r24
     cfa:	97 fb       	bst	r25, 7
     cfc:	99 1f       	adc	r25, r25
     cfe:	61 f0       	breq	.+24     	; 0xd18 <__fp_splitA+0x20>
     d00:	9f 3f       	cpi	r25, 0xFF	; 255
     d02:	79 f0       	breq	.+30     	; 0xd22 <__fp_splitA+0x2a>
     d04:	87 95       	ror	r24
     d06:	08 95       	ret
     d08:	12 16       	cp	r1, r18
     d0a:	13 06       	cpc	r1, r19
     d0c:	14 06       	cpc	r1, r20
     d0e:	55 1f       	adc	r21, r21
     d10:	f2 cf       	rjmp	.-28     	; 0xcf6 <__fp_split3+0xe>
     d12:	46 95       	lsr	r20
     d14:	f1 df       	rcall	.-30     	; 0xcf8 <__fp_splitA>
     d16:	08 c0       	rjmp	.+16     	; 0xd28 <__fp_splitA+0x30>
     d18:	16 16       	cp	r1, r22
     d1a:	17 06       	cpc	r1, r23
     d1c:	18 06       	cpc	r1, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	f1 cf       	rjmp	.-30     	; 0xd04 <__fp_splitA+0xc>
     d22:	86 95       	lsr	r24
     d24:	71 05       	cpc	r23, r1
     d26:	61 05       	cpc	r22, r1
     d28:	08 94       	sec
     d2a:	08 95       	ret

00000d2c <__fp_zero>:
     d2c:	e8 94       	clt

00000d2e <__fp_szero>:
     d2e:	bb 27       	eor	r27, r27
     d30:	66 27       	eor	r22, r22
     d32:	77 27       	eor	r23, r23
     d34:	cb 01       	movw	r24, r22
     d36:	97 f9       	bld	r25, 7
     d38:	08 95       	ret

00000d3a <__gesf2>:
     d3a:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_cmp>
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <__gesf2+0x8>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	08 95       	ret

00000d44 <__mulsf3>:
     d44:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__mulsf3x>
     d48:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__fp_round>
     d4c:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fp_pscA>
     d50:	38 f0       	brcs	.+14     	; 0xd60 <__mulsf3+0x1c>
     d52:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_pscB>
     d56:	20 f0       	brcs	.+8      	; 0xd60 <__mulsf3+0x1c>
     d58:	95 23       	and	r25, r21
     d5a:	11 f0       	breq	.+4      	; 0xd60 <__mulsf3+0x1c>
     d5c:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_inf>
     d60:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_nan>
     d64:	11 24       	eor	r1, r1
     d66:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>

00000d6a <__mulsf3x>:
     d6a:	0e 94 74 06 	call	0xce8	; 0xce8 <__fp_split3>
     d6e:	70 f3       	brcs	.-36     	; 0xd4c <__mulsf3+0x8>

00000d70 <__mulsf3_pse>:
     d70:	95 9f       	mul	r25, r21
     d72:	c1 f3       	breq	.-16     	; 0xd64 <__mulsf3+0x20>
     d74:	95 0f       	add	r25, r21
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	55 1f       	adc	r21, r21
     d7a:	62 9f       	mul	r22, r18
     d7c:	f0 01       	movw	r30, r0
     d7e:	72 9f       	mul	r23, r18
     d80:	bb 27       	eor	r27, r27
     d82:	f0 0d       	add	r31, r0
     d84:	b1 1d       	adc	r27, r1
     d86:	63 9f       	mul	r22, r19
     d88:	aa 27       	eor	r26, r26
     d8a:	f0 0d       	add	r31, r0
     d8c:	b1 1d       	adc	r27, r1
     d8e:	aa 1f       	adc	r26, r26
     d90:	64 9f       	mul	r22, r20
     d92:	66 27       	eor	r22, r22
     d94:	b0 0d       	add	r27, r0
     d96:	a1 1d       	adc	r26, r1
     d98:	66 1f       	adc	r22, r22
     d9a:	82 9f       	mul	r24, r18
     d9c:	22 27       	eor	r18, r18
     d9e:	b0 0d       	add	r27, r0
     da0:	a1 1d       	adc	r26, r1
     da2:	62 1f       	adc	r22, r18
     da4:	73 9f       	mul	r23, r19
     da6:	b0 0d       	add	r27, r0
     da8:	a1 1d       	adc	r26, r1
     daa:	62 1f       	adc	r22, r18
     dac:	83 9f       	mul	r24, r19
     dae:	a0 0d       	add	r26, r0
     db0:	61 1d       	adc	r22, r1
     db2:	22 1f       	adc	r18, r18
     db4:	74 9f       	mul	r23, r20
     db6:	33 27       	eor	r19, r19
     db8:	a0 0d       	add	r26, r0
     dba:	61 1d       	adc	r22, r1
     dbc:	23 1f       	adc	r18, r19
     dbe:	84 9f       	mul	r24, r20
     dc0:	60 0d       	add	r22, r0
     dc2:	21 1d       	adc	r18, r1
     dc4:	82 2f       	mov	r24, r18
     dc6:	76 2f       	mov	r23, r22
     dc8:	6a 2f       	mov	r22, r26
     dca:	11 24       	eor	r1, r1
     dcc:	9f 57       	subi	r25, 0x7F	; 127
     dce:	50 40       	sbci	r21, 0x00	; 0
     dd0:	9a f0       	brmi	.+38     	; 0xdf8 <__mulsf3_pse+0x88>
     dd2:	f1 f0       	breq	.+60     	; 0xe10 <__mulsf3_pse+0xa0>
     dd4:	88 23       	and	r24, r24
     dd6:	4a f0       	brmi	.+18     	; 0xdea <__mulsf3_pse+0x7a>
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	bb 1f       	adc	r27, r27
     dde:	66 1f       	adc	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	88 1f       	adc	r24, r24
     de4:	91 50       	subi	r25, 0x01	; 1
     de6:	50 40       	sbci	r21, 0x00	; 0
     de8:	a9 f7       	brne	.-22     	; 0xdd4 <__mulsf3_pse+0x64>
     dea:	9e 3f       	cpi	r25, 0xFE	; 254
     dec:	51 05       	cpc	r21, r1
     dee:	80 f0       	brcs	.+32     	; 0xe10 <__mulsf3_pse+0xa0>
     df0:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_inf>
     df4:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__fp_szero>
     df8:	5f 3f       	cpi	r21, 0xFF	; 255
     dfa:	e4 f3       	brlt	.-8      	; 0xdf4 <__mulsf3_pse+0x84>
     dfc:	98 3e       	cpi	r25, 0xE8	; 232
     dfe:	d4 f3       	brlt	.-12     	; 0xdf4 <__mulsf3_pse+0x84>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b7 95       	ror	r27
     e08:	f7 95       	ror	r31
     e0a:	e7 95       	ror	r30
     e0c:	9f 5f       	subi	r25, 0xFF	; 255
     e0e:	c1 f7       	brne	.-16     	; 0xe00 <__mulsf3_pse+0x90>
     e10:	fe 2b       	or	r31, r30
     e12:	88 0f       	add	r24, r24
     e14:	91 1d       	adc	r25, r1
     e16:	96 95       	lsr	r25
     e18:	87 95       	ror	r24
     e1a:	97 f9       	bld	r25, 7
     e1c:	08 95       	ret

00000e1e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     e1e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     e20:	91 8d       	ldd	r25, Z+25	; 0x19
     e22:	22 8d       	ldd	r18, Z+26	; 0x1a
     e24:	89 2f       	mov	r24, r25
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	80 5c       	subi	r24, 0xC0	; 192
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	82 1b       	sub	r24, r18
     e2e:	91 09       	sbc	r25, r1
}
     e30:	8f 73       	andi	r24, 0x3F	; 63
     e32:	99 27       	eor	r25, r25
     e34:	08 95       	ret

00000e36 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     e36:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     e38:	91 8d       	ldd	r25, Z+25	; 0x19
     e3a:	82 8d       	ldd	r24, Z+26	; 0x1a
     e3c:	98 17       	cp	r25, r24
     e3e:	31 f0       	breq	.+12     	; 0xe4c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     e40:	82 8d       	ldd	r24, Z+26	; 0x1a
     e42:	e8 0f       	add	r30, r24
     e44:	f1 1d       	adc	r31, r1
     e46:	85 8d       	ldd	r24, Z+29	; 0x1d
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     e50:	08 95       	ret

00000e52 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     e52:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     e54:	91 8d       	ldd	r25, Z+25	; 0x19
     e56:	82 8d       	ldd	r24, Z+26	; 0x1a
     e58:	98 17       	cp	r25, r24
     e5a:	61 f0       	breq	.+24     	; 0xe74 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e5c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e5e:	df 01       	movw	r26, r30
     e60:	a8 0f       	add	r26, r24
     e62:	b1 1d       	adc	r27, r1
     e64:	5d 96       	adiw	r26, 0x1d	; 29
     e66:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e68:	92 8d       	ldd	r25, Z+26	; 0x1a
     e6a:	9f 5f       	subi	r25, 0xFF	; 255
     e6c:	9f 73       	andi	r25, 0x3F	; 63
     e6e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e78:	08 95       	ret

00000e7a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     e7a:	fc 01       	movw	r30, r24
     e7c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     e7e:	44 8d       	ldd	r20, Z+28	; 0x1c
     e80:	25 2f       	mov	r18, r21
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	84 2f       	mov	r24, r20
     e86:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e88:	82 1b       	sub	r24, r18
     e8a:	93 0b       	sbc	r25, r19
     e8c:	54 17       	cp	r21, r20
     e8e:	10 f0       	brcs	.+4      	; 0xe94 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     e90:	cf 96       	adiw	r24, 0x3f	; 63
     e92:	08 95       	ret
  return tail - head - 1;
     e94:	01 97       	sbiw	r24, 0x01	; 1
}
     e96:	08 95       	ret

00000e98 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     e98:	81 ea       	ldi	r24, 0xA1	; 161
     e9a:	98 e0       	ldi	r25, 0x08	; 8
     e9c:	89 2b       	or	r24, r25
     e9e:	49 f0       	breq	.+18     	; 0xeb2 <_Z14serialEventRunv+0x1a>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	89 2b       	or	r24, r25
     ea6:	29 f0       	breq	.+10     	; 0xeb2 <_Z14serialEventRunv+0x1a>
     ea8:	0e 94 a1 08 	call	0x1142	; 0x1142 <_Z17Serial0_availablev>
     eac:	81 11       	cpse	r24, r1
     eae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     eb2:	08 95       	ret

00000eb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     eb4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     eb6:	84 8d       	ldd	r24, Z+28	; 0x1c
     eb8:	df 01       	movw	r26, r30
     eba:	a8 0f       	add	r26, r24
     ebc:	b1 1d       	adc	r27, r1
     ebe:	a3 5a       	subi	r26, 0xA3	; 163
     ec0:	bf 4f       	sbci	r27, 0xFF	; 255
     ec2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     ec4:	84 8d       	ldd	r24, Z+28	; 0x1c
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	8f 73       	andi	r24, 0x3F	; 63
     ecc:	99 27       	eor	r25, r25
     ece:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     ed0:	a6 89       	ldd	r26, Z+22	; 0x16
     ed2:	b7 89       	ldd	r27, Z+23	; 0x17
     ed4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     ed6:	a0 89       	ldd	r26, Z+16	; 0x10
     ed8:	b1 89       	ldd	r27, Z+17	; 0x11
     eda:	8c 91       	ld	r24, X
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     ee0:	93 8d       	ldd	r25, Z+27	; 0x1b
     ee2:	84 8d       	ldd	r24, Z+28	; 0x1c
     ee4:	98 13       	cpse	r25, r24
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     ee8:	02 88       	ldd	r0, Z+18	; 0x12
     eea:	f3 89       	ldd	r31, Z+19	; 0x13
     eec:	e0 2d       	mov	r30, r0
     eee:	80 81       	ld	r24, Z
     ef0:	8f 7d       	andi	r24, 0xDF	; 223
     ef2:	80 83       	st	Z, r24
     ef4:	08 95       	ret

00000ef6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     efc:	88 8d       	ldd	r24, Y+24	; 0x18
     efe:	88 23       	and	r24, r24
     f00:	c9 f0       	breq	.+50     	; 0xf34 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     f02:	ea 89       	ldd	r30, Y+18	; 0x12
     f04:	fb 89       	ldd	r31, Y+19	; 0x13
     f06:	80 81       	ld	r24, Z
     f08:	85 fd       	sbrc	r24, 5
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <_ZN14HardwareSerial5flushEv+0x20>
     f0c:	a8 89       	ldd	r26, Y+16	; 0x10
     f0e:	b9 89       	ldd	r27, Y+17	; 0x11
     f10:	8c 91       	ld	r24, X
     f12:	86 fd       	sbrc	r24, 6
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	07 fc       	sbrc	r0, 7
     f1a:	f5 cf       	rjmp	.-22     	; 0xf06 <_ZN14HardwareSerial5flushEv+0x10>
     f1c:	80 81       	ld	r24, Z
     f1e:	85 ff       	sbrs	r24, 5
     f20:	f2 cf       	rjmp	.-28     	; 0xf06 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     f22:	a8 89       	ldd	r26, Y+16	; 0x10
     f24:	b9 89       	ldd	r27, Y+17	; 0x11
     f26:	8c 91       	ld	r24, X
     f28:	85 ff       	sbrs	r24, 5
     f2a:	ed cf       	rjmp	.-38     	; 0xf06 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     f2c:	ce 01       	movw	r24, r28
     f2e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f32:	e7 cf       	rjmp	.-50     	; 0xf02 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
  _written = true;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f50:	98 13       	cpse	r25, r24
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <_ZN14HardwareSerial5writeEh+0x24>
     f54:	e8 89       	ldd	r30, Y+16	; 0x10
     f56:	f9 89       	ldd	r31, Y+17	; 0x11
     f58:	80 81       	ld	r24, Z
     f5a:	85 fd       	sbrc	r24, 5
     f5c:	24 c0       	rjmp	.+72     	; 0xfa6 <_ZN14HardwareSerial5writeEh+0x6c>
     f5e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f60:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	0f 5f       	subi	r16, 0xFF	; 255
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	0f 73       	andi	r16, 0x3F	; 63
     f6a:	11 27       	eor	r17, r17
     f6c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     f6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f70:	e8 12       	cpse	r14, r24
     f72:	0c c0       	rjmp	.+24     	; 0xf8c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	07 fc       	sbrc	r0, 7
     f78:	fa cf       	rjmp	.-12     	; 0xf6e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     f7a:	e8 89       	ldd	r30, Y+16	; 0x10
     f7c:	f9 89       	ldd	r31, Y+17	; 0x11
     f7e:	80 81       	ld	r24, Z
     f80:	85 ff       	sbrs	r24, 5
     f82:	f5 cf       	rjmp	.-22     	; 0xf6e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f8a:	f1 cf       	rjmp	.-30     	; 0xf6e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8e:	fe 01       	movw	r30, r28
     f90:	e8 0f       	add	r30, r24
     f92:	f1 1d       	adc	r31, r1
     f94:	e3 5a       	subi	r30, 0xA3	; 163
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     f9a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     f9c:	ea 89       	ldd	r30, Y+18	; 0x12
     f9e:	fb 89       	ldd	r31, Y+19	; 0x13
     fa0:	80 81       	ld	r24, Z
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     fa6:	ee 89       	ldd	r30, Y+22	; 0x16
     fa8:	ff 89       	ldd	r31, Y+23	; 0x17
     faa:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     fac:	e8 89       	ldd	r30, Y+16	; 0x10
     fae:	f9 89       	ldd	r31, Y+17	; 0x11
     fb0:	80 81       	ld	r24, Z
     fb2:	80 64       	ori	r24, 0x40	; 64
     fb4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret

00000fc8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
     fd8:	6a 01       	movw	r12, r20
     fda:	7b 01       	movw	r14, r22
     fdc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     fde:	e8 89       	ldd	r30, Y+16	; 0x10
     fe0:	f9 89       	ldd	r31, Y+17	; 0x11
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     fe6:	41 15       	cp	r20, r1
     fe8:	51 4e       	sbci	r21, 0xE1	; 225
     fea:	61 05       	cpc	r22, r1
     fec:	71 05       	cpc	r23, r1
     fee:	b1 f0       	breq	.+44     	; 0x101c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	79 e0       	ldi	r23, 0x09	; 9
     ff4:	8d e3       	ldi	r24, 0x3D	; 61
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a7 01       	movw	r20, r14
     ffa:	96 01       	movw	r18, r12
     ffc:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodsi4>
    1000:	da 01       	movw	r26, r20
    1002:	c9 01       	movw	r24, r18
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	a1 09       	sbc	r26, r1
    1008:	b1 09       	sbc	r27, r1
    100a:	b6 95       	lsr	r27
    100c:	a7 95       	ror	r26
    100e:	97 95       	ror	r25
    1010:	87 95       	ror	r24
    1012:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1014:	41 15       	cp	r20, r1
    1016:	80 e1       	ldi	r24, 0x10	; 16
    1018:	58 07       	cpc	r21, r24
    101a:	a8 f0       	brcs	.+42     	; 0x1046 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    101c:	e8 89       	ldd	r30, Y+16	; 0x10
    101e:	f9 89       	ldd	r31, Y+17	; 0x11
    1020:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1022:	60 e8       	ldi	r22, 0x80	; 128
    1024:	74 e8       	ldi	r23, 0x84	; 132
    1026:	8e e1       	ldi	r24, 0x1E	; 30
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a7 01       	movw	r20, r14
    102c:	96 01       	movw	r18, r12
    102e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodsi4>
    1032:	ba 01       	movw	r22, r20
    1034:	a9 01       	movw	r20, r18
    1036:	41 50       	subi	r20, 0x01	; 1
    1038:	51 09       	sbc	r21, r1
    103a:	61 09       	sbc	r22, r1
    103c:	71 09       	sbc	r23, r1
    103e:	76 95       	lsr	r23
    1040:	67 95       	ror	r22
    1042:	57 95       	ror	r21
    1044:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1046:	ec 85       	ldd	r30, Y+12	; 0x0c
    1048:	fd 85       	ldd	r31, Y+13	; 0x0d
    104a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    104c:	ee 85       	ldd	r30, Y+14	; 0x0e
    104e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1050:	40 83       	st	Z, r20

  _written = false;
    1052:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1054:	ec 89       	ldd	r30, Y+20	; 0x14
    1056:	fd 89       	ldd	r31, Y+21	; 0x15
    1058:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    105a:	ea 89       	ldd	r30, Y+18	; 0x12
    105c:	fb 89       	ldd	r31, Y+19	; 0x13
    105e:	80 81       	ld	r24, Z
    1060:	80 61       	ori	r24, 0x10	; 16
    1062:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1064:	ea 89       	ldd	r30, Y+18	; 0x12
    1066:	fb 89       	ldd	r31, Y+19	; 0x13
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    106e:	ea 89       	ldd	r30, Y+18	; 0x12
    1070:	fb 89       	ldd	r31, Y+19	; 0x13
    1072:	80 81       	ld	r24, Z
    1074:	80 68       	ori	r24, 0x80	; 128
    1076:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1078:	ea 89       	ldd	r30, Y+18	; 0x12
    107a:	fb 89       	ldd	r31, Y+19	; 0x13
    107c:	80 81       	ld	r24, Z
    107e:	8f 7d       	andi	r24, 0xDF	; 223
    1080:	80 83       	st	Z, r24
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	08 95       	ret

00001092 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    10a6:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <Serial+0x10>
    10aa:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <Serial+0x11>
    10ae:	80 81       	ld	r24, Z
    10b0:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <Serial+0x16>
    10b4:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <Serial+0x17>
    10b8:	82 fd       	sbrc	r24, 2
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    10bc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    10be:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <Serial+0x19>
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    10c6:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <Serial+0x1a>
    10ca:	82 17       	cp	r24, r18
    10cc:	51 f0       	breq	.+20     	; 0x10e2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    10ce:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <Serial+0x19>
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	e3 5d       	subi	r30, 0xD3	; 211
    10d6:	fd 4f       	sbci	r31, 0xFD	; 253
    10d8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    10da:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <Serial+0x19>
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    10e0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1118:	8d e2       	ldi	r24, 0x2D	; 45
    111a:	92 e0       	ldi	r25, 0x02	; 2
    111c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1142:	8d e2       	ldi	r24, 0x2D	; 45
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN14HardwareSerial9availableEv>
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	89 2b       	or	r24, r25
    114e:	09 f4       	brne	.+2      	; 0x1152 <_Z17Serial0_availablev+0x10>
    1150:	20 e0       	ldi	r18, 0x00	; 0
}
    1152:	82 2f       	mov	r24, r18
    1154:	08 95       	ret

00001156 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1156:	ed e2       	ldi	r30, 0x2D	; 45
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	13 82       	std	Z+3, r1	; 0x03
    115c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    115e:	88 ee       	ldi	r24, 0xE8	; 232
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	a0 e0       	ldi	r26, 0x00	; 0
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	84 83       	std	Z+4, r24	; 0x04
    1168:	95 83       	std	Z+5, r25	; 0x05
    116a:	a6 83       	std	Z+6, r26	; 0x06
    116c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    116e:	84 e2       	ldi	r24, 0x24	; 36
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
    1176:	85 ec       	ldi	r24, 0xC5	; 197
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	95 87       	std	Z+13, r25	; 0x0d
    117c:	84 87       	std	Z+12, r24	; 0x0c
    117e:	84 ec       	ldi	r24, 0xC4	; 196
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	97 87       	std	Z+15, r25	; 0x0f
    1184:	86 87       	std	Z+14, r24	; 0x0e
    1186:	80 ec       	ldi	r24, 0xC0	; 192
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	91 8b       	std	Z+17, r25	; 0x11
    118c:	80 8b       	std	Z+16, r24	; 0x10
    118e:	81 ec       	ldi	r24, 0xC1	; 193
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	93 8b       	std	Z+19, r25	; 0x13
    1194:	82 8b       	std	Z+18, r24	; 0x12
    1196:	82 ec       	ldi	r24, 0xC2	; 194
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	95 8b       	std	Z+21, r25	; 0x15
    119c:	84 8b       	std	Z+20, r24	; 0x14
    119e:	86 ec       	ldi	r24, 0xC6	; 198
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	97 8b       	std	Z+23, r25	; 0x17
    11a4:	86 8b       	std	Z+22, r24	; 0x16
    11a6:	11 8e       	std	Z+25, r1	; 0x19
    11a8:	12 8e       	std	Z+26, r1	; 0x1a
    11aa:	13 8e       	std	Z+27, r1	; 0x1b
    11ac:	14 8e       	std	Z+28, r1	; 0x1c
    11ae:	08 95       	ret

000011b0 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    11b0:	08 95       	ret

000011b2 <main>:

int main(void)
{
	init();
    11b2:	0e 94 43 0b 	call	0x1686	; 0x1686 <init>

	initVariant();
    11b6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    11ba:	0e 94 89 00 	call	0x112	; 0x112 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    11be:	cc e4       	ldi	r28, 0x4C	; 76
    11c0:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    11c2:	0e 94 c0 00 	call	0x180	; 0x180 <loop>
		if (serialEventRun) serialEventRun();
    11c6:	20 97       	sbiw	r28, 0x00	; 0
    11c8:	e1 f3       	breq	.-8      	; 0x11c2 <main+0x10>
    11ca:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z14serialEventRunv>
    11ce:	f9 cf       	rjmp	.-14     	; 0x11c2 <main+0x10>

000011d0 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	6c 01       	movw	r12, r24
    11e2:	7a 01       	movw	r14, r20
    11e4:	8b 01       	movw	r16, r22
    11e6:	c0 e0       	ldi	r28, 0x00	; 0
    11e8:	d0 e0       	ldi	r29, 0x00	; 0
    11ea:	ce 15       	cp	r28, r14
    11ec:	df 05       	cpc	r29, r15
    11ee:	89 f0       	breq	.+34     	; 0x1212 <_ZN5Print5writeEPKhj+0x42>
    11f0:	d8 01       	movw	r26, r16
    11f2:	6d 91       	ld	r22, X+
    11f4:	8d 01       	movw	r16, r26
    11f6:	d6 01       	movw	r26, r12
    11f8:	ed 91       	ld	r30, X+
    11fa:	fc 91       	ld	r31, X
    11fc:	01 90       	ld	r0, Z+
    11fe:	f0 81       	ld	r31, Z
    1200:	e0 2d       	mov	r30, r0
    1202:	c6 01       	movw	r24, r12
    1204:	09 95       	icall
    1206:	89 2b       	or	r24, r25
    1208:	11 f4       	brne	.+4      	; 0x120e <_ZN5Print5writeEPKhj+0x3e>
    120a:	7e 01       	movw	r14, r28
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <_ZN5Print5writeEPKhj+0x42>
    120e:	21 96       	adiw	r28, 0x01	; 1
    1210:	ec cf       	rjmp	.-40     	; 0x11ea <_ZN5Print5writeEPKhj+0x1a>
    1212:	c7 01       	movw	r24, r14
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	08 95       	ret

00001226 <_ZN5Print5writeEPKc>:
    1226:	61 15       	cp	r22, r1
    1228:	71 05       	cpc	r23, r1
    122a:	79 f0       	breq	.+30     	; 0x124a <_ZN5Print5writeEPKc+0x24>
    122c:	fb 01       	movw	r30, r22
    122e:	01 90       	ld	r0, Z+
    1230:	00 20       	and	r0, r0
    1232:	e9 f7       	brne	.-6      	; 0x122e <_ZN5Print5writeEPKc+0x8>
    1234:	31 97       	sbiw	r30, 0x01	; 1
    1236:	af 01       	movw	r20, r30
    1238:	46 1b       	sub	r20, r22
    123a:	57 0b       	sbc	r21, r23
    123c:	dc 01       	movw	r26, r24
    123e:	ed 91       	ld	r30, X+
    1240:	fc 91       	ld	r31, X
    1242:	02 80       	ldd	r0, Z+2	; 0x02
    1244:	f3 81       	ldd	r31, Z+3	; 0x03
    1246:	e0 2d       	mov	r30, r0
    1248:	09 94       	ijmp
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	08 95       	ret

00001250 <_ZN5Print5printEc>:
    1250:	dc 01       	movw	r26, r24
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	01 90       	ld	r0, Z+
    1258:	f0 81       	ld	r31, Z
    125a:	e0 2d       	mov	r30, r0
    125c:	09 94       	ijmp

0000125e <_ZN5Print7printlnEv>:
    125e:	62 e3       	ldi	r22, 0x32	; 50
    1260:	71 e0       	ldi	r23, 0x01	; 1
    1262:	0c 94 13 09 	jmp	0x1226	; 0x1226 <_ZN5Print5writeEPKc>

00001266 <_ZN5Print7printlnEPKc>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
    1270:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN5Print5writeEPKc>
    1274:	8c 01       	movw	r16, r24
    1276:	ce 01       	movw	r24, r28
    1278:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print7printlnEv>
    127c:	80 0f       	add	r24, r16
    127e:	91 1f       	adc	r25, r17
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <_ZN5Print11printNumberEmh>:
    128a:	8f 92       	push	r8
    128c:	9f 92       	push	r9
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	a1 97       	sbiw	r28, 0x21	; 33
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	7c 01       	movw	r14, r24
    12b4:	d4 2e       	mov	r13, r20
    12b6:	c5 2e       	mov	r12, r21
    12b8:	db 01       	movw	r26, r22
    12ba:	19 a2       	std	Y+33, r1	; 0x21
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	08 f4       	brcc	.+2      	; 0x12c2 <_ZN5Print11printNumberEmh+0x38>
    12c0:	2a e0       	ldi	r18, 0x0A	; 10
    12c2:	8e 01       	movw	r16, r28
    12c4:	0f 5d       	subi	r16, 0xDF	; 223
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	82 2e       	mov	r8, r18
    12ca:	91 2c       	mov	r9, r1
    12cc:	a1 2c       	mov	r10, r1
    12ce:	b1 2c       	mov	r11, r1
    12d0:	6d 2d       	mov	r22, r13
    12d2:	7c 2d       	mov	r23, r12
    12d4:	cd 01       	movw	r24, r26
    12d6:	a5 01       	movw	r20, r10
    12d8:	94 01       	movw	r18, r8
    12da:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodsi4>
    12de:	d2 2e       	mov	r13, r18
    12e0:	c3 2e       	mov	r12, r19
    12e2:	da 01       	movw	r26, r20
    12e4:	01 50       	subi	r16, 0x01	; 1
    12e6:	11 09       	sbc	r17, r1
    12e8:	6a 30       	cpi	r22, 0x0A	; 10
    12ea:	71 05       	cpc	r23, r1
    12ec:	81 05       	cpc	r24, r1
    12ee:	91 05       	cpc	r25, r1
    12f0:	10 f4       	brcc	.+4      	; 0x12f6 <_ZN5Print11printNumberEmh+0x6c>
    12f2:	60 5d       	subi	r22, 0xD0	; 208
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <_ZN5Print11printNumberEmh+0x6e>
    12f6:	69 5c       	subi	r22, 0xC9	; 201
    12f8:	f8 01       	movw	r30, r16
    12fa:	60 83       	st	Z, r22
    12fc:	23 2b       	or	r18, r19
    12fe:	24 2b       	or	r18, r20
    1300:	25 2b       	or	r18, r21
    1302:	31 f7       	brne	.-52     	; 0x12d0 <_ZN5Print11printNumberEmh+0x46>
    1304:	b8 01       	movw	r22, r16
    1306:	c7 01       	movw	r24, r14
    1308:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN5Print5writeEPKc>
    130c:	a1 96       	adiw	r28, 0x21	; 33
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	cf 90       	pop	r12
    1328:	bf 90       	pop	r11
    132a:	af 90       	pop	r10
    132c:	9f 90       	pop	r9
    132e:	8f 90       	pop	r8
    1330:	08 95       	ret

00001332 <_ZN5Print10printFloatEdh>:
    1332:	4f 92       	push	r4
    1334:	5f 92       	push	r5
    1336:	6f 92       	push	r6
    1338:	7f 92       	push	r7
    133a:	8f 92       	push	r8
    133c:	9f 92       	push	r9
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	6a 01       	movw	r12, r20
    1352:	7b 01       	movw	r14, r22
    1354:	b2 2e       	mov	r11, r18
    1356:	9a 01       	movw	r18, r20
    1358:	ab 01       	movw	r20, r22
    135a:	c7 01       	movw	r24, r14
    135c:	b6 01       	movw	r22, r12
    135e:	0e 94 a6 0c 	call	0x194c	; 0x194c <__unordsf2>
    1362:	88 23       	and	r24, r24
    1364:	19 f0       	breq	.+6      	; 0x136c <_ZN5Print10printFloatEdh+0x3a>
    1366:	65 e3       	ldi	r22, 0x35	; 53
    1368:	71 e0       	ldi	r23, 0x01	; 1
    136a:	27 c0       	rjmp	.+78     	; 0x13ba <_ZN5Print10printFloatEdh+0x88>
    136c:	26 01       	movw	r4, r12
    136e:	37 01       	movw	r6, r14
    1370:	e8 94       	clt
    1372:	77 f8       	bld	r7, 7
    1374:	2f ef       	ldi	r18, 0xFF	; 255
    1376:	3f ef       	ldi	r19, 0xFF	; 255
    1378:	4f e7       	ldi	r20, 0x7F	; 127
    137a:	5f e7       	ldi	r21, 0x7F	; 127
    137c:	c3 01       	movw	r24, r6
    137e:	b2 01       	movw	r22, r4
    1380:	0e 94 a6 0c 	call	0x194c	; 0x194c <__unordsf2>
    1384:	81 11       	cpse	r24, r1
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <_ZN5Print10printFloatEdh+0x70>
    1388:	2f ef       	ldi	r18, 0xFF	; 255
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	4f e7       	ldi	r20, 0x7F	; 127
    138e:	5f e7       	ldi	r21, 0x7F	; 127
    1390:	c3 01       	movw	r24, r6
    1392:	b2 01       	movw	r22, r4
    1394:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
    1398:	18 16       	cp	r1, r24
    139a:	1c f4       	brge	.+6      	; 0x13a2 <_ZN5Print10printFloatEdh+0x70>
    139c:	69 e3       	ldi	r22, 0x39	; 57
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	0c c0       	rjmp	.+24     	; 0x13ba <_ZN5Print10printFloatEdh+0x88>
    13a2:	2f ef       	ldi	r18, 0xFF	; 255
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	5f e4       	ldi	r21, 0x4F	; 79
    13aa:	c7 01       	movw	r24, r14
    13ac:	b6 01       	movw	r22, r12
    13ae:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__gesf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	9c f4       	brge	.+38     	; 0x13dc <_ZN5Print10printFloatEdh+0xaa>
    13b6:	6d e3       	ldi	r22, 0x3D	; 61
    13b8:	71 e0       	ldi	r23, 0x01	; 1
    13ba:	ce 01       	movw	r24, r28
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	9f 90       	pop	r9
    13ce:	8f 90       	pop	r8
    13d0:	7f 90       	pop	r7
    13d2:	6f 90       	pop	r6
    13d4:	5f 90       	pop	r5
    13d6:	4f 90       	pop	r4
    13d8:	0c 94 13 09 	jmp	0x1226	; 0x1226 <_ZN5Print5writeEPKc>
    13dc:	2f ef       	ldi	r18, 0xFF	; 255
    13de:	3f ef       	ldi	r19, 0xFF	; 255
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	5f ec       	ldi	r21, 0xCF	; 207
    13e4:	c7 01       	movw	r24, r14
    13e6:	b6 01       	movw	r22, r12
    13e8:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
    13ec:	87 fd       	sbrc	r24, 7
    13ee:	e3 cf       	rjmp	.-58     	; 0x13b6 <_ZN5Print10printFloatEdh+0x84>
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	c7 01       	movw	r24, r14
    13f8:	b6 01       	movw	r22, r12
    13fa:	0e 94 74 05 	call	0xae8	; 0xae8 <__cmpsf2>
    13fe:	87 ff       	sbrs	r24, 7
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <_ZN5Print10printFloatEdh+0xe4>
    1402:	6d e2       	ldi	r22, 0x2D	; 45
    1404:	ce 01       	movw	r24, r28
    1406:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN5Print5printEc>
    140a:	4c 01       	movw	r8, r24
    140c:	f7 fa       	bst	r15, 7
    140e:	f0 94       	com	r15
    1410:	f7 f8       	bld	r15, 7
    1412:	f0 94       	com	r15
    1414:	02 c0       	rjmp	.+4      	; 0x141a <_ZN5Print10printFloatEdh+0xe8>
    1416:	81 2c       	mov	r8, r1
    1418:	91 2c       	mov	r9, r1
    141a:	a1 2c       	mov	r10, r1
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	9f e3       	ldi	r25, 0x3F	; 63
    1424:	ab 14       	cp	r10, r11
    1426:	41 f0       	breq	.+16     	; 0x1438 <_ZN5Print10printFloatEdh+0x106>
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
    1434:	a3 94       	inc	r10
    1436:	f6 cf       	rjmp	.-20     	; 0x1424 <_ZN5Print10printFloatEdh+0xf2>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	c7 01       	movw	r24, r14
    143e:	b6 01       	movw	r22, r12
    1440:	0e 94 08 05 	call	0xa10	; 0xa10 <__addsf3>
    1444:	2b 01       	movw	r4, r22
    1446:	3c 01       	movw	r6, r24
    1448:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fixunssfsi>
    144c:	6b 01       	movw	r12, r22
    144e:	7c 01       	movw	r14, r24
    1450:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	c3 01       	movw	r24, r6
    145a:	b2 01       	movw	r22, r4
    145c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
    1460:	2b 01       	movw	r4, r22
    1462:	3c 01       	movw	r6, r24
    1464:	2a e0       	ldi	r18, 0x0A	; 10
    1466:	b7 01       	movw	r22, r14
    1468:	a6 01       	movw	r20, r12
    146a:	ce 01       	movw	r24, r28
    146c:	0e 94 45 09 	call	0x128a	; 0x128a <_ZN5Print11printNumberEmh>
    1470:	7c 01       	movw	r14, r24
    1472:	e8 0c       	add	r14, r8
    1474:	f9 1c       	adc	r15, r9
    1476:	bb 20       	and	r11, r11
    1478:	31 f0       	breq	.+12     	; 0x1486 <_ZN5Print10printFloatEdh+0x154>
    147a:	6e e2       	ldi	r22, 0x2E	; 46
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN5Print5printEc>
    1482:	e8 0e       	add	r14, r24
    1484:	f9 1e       	adc	r15, r25
    1486:	db 2c       	mov	r13, r11
    1488:	dd 20       	and	r13, r13
    148a:	29 f1       	breq	.+74     	; 0x14d6 <_ZN5Print10printFloatEdh+0x1a4>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	c3 01       	movw	r24, r6
    1496:	b2 01       	movw	r22, r4
    1498:	0e 94 a2 06 	call	0xd44	; 0xd44 <__mulsf3>
    149c:	2b 01       	movw	r4, r22
    149e:	3c 01       	movw	r6, r24
    14a0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fixunssfsi>
    14a4:	4b 01       	movw	r8, r22
    14a6:	a1 2c       	mov	r10, r1
    14a8:	b1 2c       	mov	r11, r1
    14aa:	2a e0       	ldi	r18, 0x0A	; 10
    14ac:	b5 01       	movw	r22, r10
    14ae:	a4 01       	movw	r20, r8
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 94 45 09 	call	0x128a	; 0x128a <_ZN5Print11printNumberEmh>
    14b6:	e8 0e       	add	r14, r24
    14b8:	f9 1e       	adc	r15, r25
    14ba:	c5 01       	movw	r24, r10
    14bc:	b4 01       	movw	r22, r8
    14be:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	c3 01       	movw	r24, r6
    14c8:	b2 01       	movw	r22, r4
    14ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__subsf3>
    14ce:	2b 01       	movw	r4, r22
    14d0:	3c 01       	movw	r6, r24
    14d2:	da 94       	dec	r13
    14d4:	d9 cf       	rjmp	.-78     	; 0x1488 <_ZN5Print10printFloatEdh+0x156>
    14d6:	c7 01       	movw	r24, r14
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	08 95       	ret

000014f6 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1500:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN5Print10printFloatEdh>
    1504:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1506:	ce 01       	movw	r24, r28
    1508:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print7printlnEv>
  return n;
}
    150c:	80 0f       	add	r24, r16
    150e:	91 1f       	adc	r25, r17
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	8f 93       	push	r24
    152a:	9f 93       	push	r25
    152c:	af 93       	push	r26
    152e:	bf 93       	push	r27
    1530:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <timer0_millis>
    1534:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <timer0_millis+0x1>
    1538:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <timer0_millis+0x2>
    153c:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <timer0_millis+0x3>
    1540:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <timer0_fract>
    1544:	23 e0       	ldi	r18, 0x03	; 3
    1546:	23 0f       	add	r18, r19
    1548:	2d 37       	cpi	r18, 0x7D	; 125
    154a:	20 f4       	brcc	.+8      	; 0x1554 <__vector_16+0x3a>
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	a1 1d       	adc	r26, r1
    1550:	b1 1d       	adc	r27, r1
    1552:	05 c0       	rjmp	.+10     	; 0x155e <__vector_16+0x44>
    1554:	26 e8       	ldi	r18, 0x86	; 134
    1556:	23 0f       	add	r18, r19
    1558:	02 96       	adiw	r24, 0x02	; 2
    155a:	a1 1d       	adc	r26, r1
    155c:	b1 1d       	adc	r27, r1
    155e:	20 93 ca 02 	sts	0x02CA, r18	; 0x8002ca <timer0_fract>
    1562:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <timer0_millis>
    1566:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <timer0_millis+0x1>
    156a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <timer0_millis+0x2>
    156e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <timer0_millis+0x3>
    1572:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_overflow_count>
    1576:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_overflow_count+0x1>
    157a:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_overflow_count+0x2>
    157e:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_overflow_count+0x3>
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	a1 1d       	adc	r26, r1
    1586:	b1 1d       	adc	r27, r1
    1588:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_overflow_count>
    158c:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_overflow_count+0x1>
    1590:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_overflow_count+0x2>
    1594:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_overflow_count+0x3>
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    15ae:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    15b0:	f8 94       	cli
	m = timer0_overflow_count;
    15b2:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_overflow_count>
    15b6:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_overflow_count+0x1>
    15ba:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_overflow_count+0x2>
    15be:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    15c2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    15c4:	a8 9b       	sbis	0x15, 0	; 21
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <micros+0x24>
    15c8:	2f 3f       	cpi	r18, 0xFF	; 255
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <micros+0x24>
		m++;
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	a1 1d       	adc	r26, r1
    15d0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    15d2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    15d4:	ba 2f       	mov	r27, r26
    15d6:	a9 2f       	mov	r26, r25
    15d8:	98 2f       	mov	r25, r24
    15da:	88 27       	eor	r24, r24
    15dc:	82 0f       	add	r24, r18
    15de:	91 1d       	adc	r25, r1
    15e0:	a1 1d       	adc	r26, r1
    15e2:	b1 1d       	adc	r27, r1
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	42 e0       	ldi	r20, 0x02	; 2
    15ea:	66 0f       	add	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	88 1f       	adc	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	4a 95       	dec	r20
    15f4:	d1 f7       	brne	.-12     	; 0x15ea <micros+0x3c>
}
    15f6:	08 95       	ret

000015f8 <delay>:

void delay(unsigned long ms)
{
    15f8:	8f 92       	push	r8
    15fa:	9f 92       	push	r9
    15fc:	af 92       	push	r10
    15fe:	bf 92       	push	r11
    1600:	cf 92       	push	r12
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	6b 01       	movw	r12, r22
    160a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    160c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <micros>
    1610:	4b 01       	movw	r8, r22
    1612:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1614:	c1 14       	cp	r12, r1
    1616:	d1 04       	cpc	r13, r1
    1618:	e1 04       	cpc	r14, r1
    161a:	f1 04       	cpc	r15, r1
    161c:	01 f1       	breq	.+64     	; 0x165e <delay+0x66>
		yield();
    161e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1622:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <micros>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	88 19       	sub	r24, r8
    162c:	99 09       	sbc	r25, r9
    162e:	aa 09       	sbc	r26, r10
    1630:	bb 09       	sbc	r27, r11
    1632:	88 3e       	cpi	r24, 0xE8	; 232
    1634:	93 40       	sbci	r25, 0x03	; 3
    1636:	a1 05       	cpc	r26, r1
    1638:	b1 05       	cpc	r27, r1
    163a:	60 f3       	brcs	.-40     	; 0x1614 <delay+0x1c>
			ms--;
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	c2 1a       	sub	r12, r18
    1640:	d1 08       	sbc	r13, r1
    1642:	e1 08       	sbc	r14, r1
    1644:	f1 08       	sbc	r15, r1
			start += 1000;
    1646:	88 ee       	ldi	r24, 0xE8	; 232
    1648:	88 0e       	add	r8, r24
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	98 1e       	adc	r9, r24
    164e:	a1 1c       	adc	r10, r1
    1650:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1652:	c1 14       	cp	r12, r1
    1654:	d1 04       	cpc	r13, r1
    1656:	e1 04       	cpc	r14, r1
    1658:	f1 04       	cpc	r15, r1
    165a:	19 f7       	brne	.-58     	; 0x1622 <delay+0x2a>
    165c:	db cf       	rjmp	.-74     	; 0x1614 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	bf 90       	pop	r11
    1668:	af 90       	pop	r10
    166a:	9f 90       	pop	r9
    166c:	8f 90       	pop	r8
    166e:	08 95       	ret

00001670 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	91 05       	cpc	r25, r1
    1674:	38 f0       	brcs	.+14     	; 0x1684 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    167e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <delayMicroseconds+0x10>
    1684:	08 95       	ret

00001686 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1686:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1688:	84 b5       	in	r24, 0x24	; 36
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    168e:	84 b5       	in	r24, 0x24	; 36
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1694:	85 b5       	in	r24, 0x25	; 37
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    169a:	85 b5       	in	r24, 0x25	; 37
    169c:	81 60       	ori	r24, 0x01	; 1
    169e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    16a0:	ee e6       	ldi	r30, 0x6E	; 110
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    16aa:	e1 e8       	ldi	r30, 0x81	; 129
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    16b0:	80 81       	ld	r24, Z
    16b2:	82 60       	ori	r24, 0x02	; 2
    16b4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    16b6:	80 81       	ld	r24, Z
    16b8:	81 60       	ori	r24, 0x01	; 1
    16ba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    16bc:	e0 e8       	ldi	r30, 0x80	; 128
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	81 60       	ori	r24, 0x01	; 1
    16c4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    16c6:	e1 eb       	ldi	r30, 0xB1	; 177
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	84 60       	ori	r24, 0x04	; 4
    16ce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    16d0:	e0 eb       	ldi	r30, 0xB0	; 176
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	81 60       	ori	r24, 0x01	; 1
    16d8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    16da:	ea e7       	ldi	r30, 0x7A	; 122
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	84 60       	ori	r24, 0x04	; 4
    16e2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    16e4:	80 81       	ld	r24, Z
    16e6:	82 60       	ori	r24, 0x02	; 2
    16e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    16ea:	80 81       	ld	r24, Z
    16ec:	81 60       	ori	r24, 0x01	; 1
    16ee:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    16f0:	80 81       	ld	r24, Z
    16f2:	80 68       	ori	r24, 0x80	; 128
    16f4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    16f6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    16fa:	08 95       	ret

000016fc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    16fc:	8e 30       	cpi	r24, 0x0E	; 14
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <analogRead+0x6>
    1700:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1702:	87 70       	andi	r24, 0x07	; 7
    1704:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <analog_reference>
    1708:	90 e4       	ldi	r25, 0x40	; 64
    170a:	29 9f       	mul	r18, r25
    170c:	90 01       	movw	r18, r0
    170e:	11 24       	eor	r1, r1
    1710:	82 2b       	or	r24, r18
    1712:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1716:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    171a:	80 64       	ori	r24, 0x40	; 64
    171c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1720:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1724:	86 fd       	sbrc	r24, 6
    1726:	fc cf       	rjmp	.-8      	; 0x1720 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1728:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    172c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1730:	90 e0       	ldi	r25, 0x00	; 0
}
    1732:	92 2b       	or	r25, r18
    1734:	08 95       	ret

00001736 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	81 f0       	breq	.+32     	; 0x175a <turnOffPWM+0x24>
    173a:	28 f4       	brcc	.+10     	; 0x1746 <turnOffPWM+0x10>
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	99 f0       	breq	.+38     	; 0x1766 <turnOffPWM+0x30>
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	a1 f0       	breq	.+40     	; 0x176c <turnOffPWM+0x36>
    1744:	08 95       	ret
    1746:	87 30       	cpi	r24, 0x07	; 7
    1748:	a9 f0       	breq	.+42     	; 0x1774 <turnOffPWM+0x3e>
    174a:	88 30       	cpi	r24, 0x08	; 8
    174c:	b9 f0       	breq	.+46     	; 0x177c <turnOffPWM+0x46>
    174e:	84 30       	cpi	r24, 0x04	; 4
    1750:	d1 f4       	brne	.+52     	; 0x1786 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1752:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1756:	8f 7d       	andi	r24, 0xDF	; 223
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    175a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    175e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1760:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1764:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1766:	84 b5       	in	r24, 0x24	; 36
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    176c:	84 b5       	in	r24, 0x24	; 36
    176e:	8f 7d       	andi	r24, 0xDF	; 223
    1770:	84 bd       	out	0x24, r24	; 36
    1772:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1774:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1778:	8f 77       	andi	r24, 0x7F	; 127
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    177c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1780:	8f 7d       	andi	r24, 0xDF	; 223
    1782:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1786:	08 95       	ret

00001788 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	fc 01       	movw	r30, r24
    1790:	e4 58       	subi	r30, 0x84	; 132
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1796:	fc 01       	movw	r30, r24
    1798:	e0 57       	subi	r30, 0x70	; 112
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    179e:	88 23       	and	r24, r24
    17a0:	61 f1       	breq	.+88     	; 0x17fa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	fc 01       	movw	r30, r24
    17aa:	e2 55       	subi	r30, 0x52	; 82
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	c5 91       	lpm	r28, Z+
    17b0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    17b2:	fc 01       	movw	r30, r24
    17b4:	ec 55       	subi	r30, 0x5C	; 92
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	a5 91       	lpm	r26, Z+
    17ba:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17bc:	61 11       	cpse	r22, r1
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17c2:	f8 94       	cli
		*reg &= ~bit;
    17c4:	88 81       	ld	r24, Y
    17c6:	20 95       	com	r18
    17c8:	82 23       	and	r24, r18
    17ca:	88 83       	st	Y, r24
		*out &= ~bit;
    17cc:	ec 91       	ld	r30, X
    17ce:	2e 23       	and	r18, r30
    17d0:	0b c0       	rjmp	.+22     	; 0x17e8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17d2:	62 30       	cpi	r22, 0x02	; 2
    17d4:	61 f4       	brne	.+24     	; 0x17ee <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17d8:	f8 94       	cli
		*reg &= ~bit;
    17da:	38 81       	ld	r19, Y
    17dc:	82 2f       	mov	r24, r18
    17de:	80 95       	com	r24
    17e0:	83 23       	and	r24, r19
    17e2:	88 83       	st	Y, r24
		*out |= bit;
    17e4:	ec 91       	ld	r30, X
    17e6:	2e 2b       	or	r18, r30
    17e8:	2c 93       	st	X, r18
		SREG = oldSREG;
    17ea:	9f bf       	out	0x3f, r25	; 63
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    17ee:	8f b7       	in	r24, 0x3f	; 63
                cli();
    17f0:	f8 94       	cli
		*reg |= bit;
    17f2:	e8 81       	ld	r30, Y
    17f4:	2e 2b       	or	r18, r30
    17f6:	28 83       	st	Y, r18
		SREG = oldSREG;
    17f8:	8f bf       	out	0x3f, r24	; 63
	}
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	f9 01       	movw	r30, r18
    180c:	e8 59       	subi	r30, 0x98	; 152
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1812:	f9 01       	movw	r30, r18
    1814:	e4 58       	subi	r30, 0x84	; 132
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    181a:	f9 01       	movw	r30, r18
    181c:	e0 57       	subi	r30, 0x70	; 112
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1822:	cc 23       	and	r28, r28
    1824:	c9 f0       	breq	.+50     	; 0x1858 <digitalWrite+0x58>
    1826:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1828:	81 11       	cpse	r24, r1
    182a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <turnOffPWM>

	out = portOutputRegister(port);
    182e:	ec 2f       	mov	r30, r28
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	ec 55       	subi	r30, 0x5C	; 92
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	a5 91       	lpm	r26, Z+
    183c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    183e:	8f b7       	in	r24, 0x3f	; 63
	cli();
    1840:	f8 94       	cli

	if (val == LOW) {
    1842:	11 11       	cpse	r17, r1
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <digitalWrite+0x50>
		*out &= ~bit;
    1846:	9c 91       	ld	r25, X
    1848:	ed 2f       	mov	r30, r29
    184a:	e0 95       	com	r30
    184c:	e9 23       	and	r30, r25
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <digitalWrite+0x54>
	} else {
		*out |= bit;
    1850:	ec 91       	ld	r30, X
    1852:	ed 2b       	or	r30, r29
    1854:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1856:	8f bf       	out	0x3f, r24	; 63
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	08 95       	ret

00001860 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	00 d0       	rcall	.+0      	; 0x1866 <_Z6randoml+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <_Z6randoml+0x8>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
  if (howbig == 0) {
    186c:	61 15       	cp	r22, r1
    186e:	71 05       	cpc	r23, r1
    1870:	81 05       	cpc	r24, r1
    1872:	91 05       	cpc	r25, r1
    1874:	79 f0       	breq	.+30     	; 0x1894 <_Z6randoml+0x34>
    1876:	9b 01       	movw	r18, r22
    1878:	ac 01       	movw	r20, r24
    return 0;
  }
  return random() % howbig;
    187a:	69 83       	std	Y+1, r22	; 0x01
    187c:	3a 83       	std	Y+2, r19	; 0x02
    187e:	4b 83       	std	Y+3, r20	; 0x03
    1880:	5c 83       	std	Y+4, r21	; 0x04
    1882:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <random>
    1886:	29 81       	ldd	r18, Y+1	; 0x01
    1888:	3a 81       	ldd	r19, Y+2	; 0x02
    188a:	4b 81       	ldd	r20, Y+3	; 0x03
    188c:	5c 81       	ldd	r21, Y+4	; 0x04
    188e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodsi4>
    1892:	03 c0       	rjmp	.+6      	; 0x189a <_Z6randoml+0x3a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
  if (howsmall >= howbig) {
    18b4:	62 17       	cp	r22, r18
    18b6:	73 07       	cpc	r23, r19
    18b8:	84 07       	cpc	r24, r20
    18ba:	95 07       	cpc	r25, r21
    18bc:	84 f4       	brge	.+32     	; 0x18de <_Z6randomll+0x36>
    18be:	89 01       	movw	r16, r18
    18c0:	9a 01       	movw	r18, r20
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
    18c6:	c9 01       	movw	r24, r18
    18c8:	b8 01       	movw	r22, r16
    18ca:	6c 19       	sub	r22, r12
    18cc:	7d 09       	sbc	r23, r13
    18ce:	8e 09       	sbc	r24, r14
    18d0:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    18d2:	0e 94 30 0c 	call	0x1860	; 0x1860 <_Z6randoml>
    18d6:	6c 0d       	add	r22, r12
    18d8:	7d 1d       	adc	r23, r13
    18da:	8e 1d       	adc	r24, r14
    18dc:	9f 1d       	adc	r25, r15
}
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	08 95       	ret

000018ec <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    18ec:	08 95       	ret

000018ee <__fixunssfsi>:
    18ee:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_splitA>
    18f2:	88 f0       	brcs	.+34     	; 0x1916 <__fixunssfsi+0x28>
    18f4:	9f 57       	subi	r25, 0x7F	; 127
    18f6:	98 f0       	brcs	.+38     	; 0x191e <__fixunssfsi+0x30>
    18f8:	b9 2f       	mov	r27, r25
    18fa:	99 27       	eor	r25, r25
    18fc:	b7 51       	subi	r27, 0x17	; 23
    18fe:	b0 f0       	brcs	.+44     	; 0x192c <__fixunssfsi+0x3e>
    1900:	e1 f0       	breq	.+56     	; 0x193a <__fixunssfsi+0x4c>
    1902:	66 0f       	add	r22, r22
    1904:	77 1f       	adc	r23, r23
    1906:	88 1f       	adc	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	1a f0       	brmi	.+6      	; 0x1912 <__fixunssfsi+0x24>
    190c:	ba 95       	dec	r27
    190e:	c9 f7       	brne	.-14     	; 0x1902 <__fixunssfsi+0x14>
    1910:	14 c0       	rjmp	.+40     	; 0x193a <__fixunssfsi+0x4c>
    1912:	b1 30       	cpi	r27, 0x01	; 1
    1914:	91 f0       	breq	.+36     	; 0x193a <__fixunssfsi+0x4c>
    1916:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_zero>
    191a:	b1 e0       	ldi	r27, 0x01	; 1
    191c:	08 95       	ret
    191e:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_zero>
    1922:	67 2f       	mov	r22, r23
    1924:	78 2f       	mov	r23, r24
    1926:	88 27       	eor	r24, r24
    1928:	b8 5f       	subi	r27, 0xF8	; 248
    192a:	39 f0       	breq	.+14     	; 0x193a <__fixunssfsi+0x4c>
    192c:	b9 3f       	cpi	r27, 0xF9	; 249
    192e:	cc f3       	brlt	.-14     	; 0x1922 <__fixunssfsi+0x34>
    1930:	86 95       	lsr	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b3 95       	inc	r27
    1938:	d9 f7       	brne	.-10     	; 0x1930 <__fixunssfsi+0x42>
    193a:	3e f4       	brtc	.+14     	; 0x194a <__fixunssfsi+0x5c>
    193c:	90 95       	com	r25
    193e:	80 95       	com	r24
    1940:	70 95       	com	r23
    1942:	61 95       	neg	r22
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8f 4f       	sbci	r24, 0xFF	; 255
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <__unordsf2>:
    194c:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_cmp>
    1950:	88 0b       	sbc	r24, r24
    1952:	99 0b       	sbc	r25, r25
    1954:	08 95       	ret

00001956 <__udivmodsi4>:
    1956:	a1 e2       	ldi	r26, 0x21	; 33
    1958:	1a 2e       	mov	r1, r26
    195a:	aa 1b       	sub	r26, r26
    195c:	bb 1b       	sub	r27, r27
    195e:	fd 01       	movw	r30, r26
    1960:	0d c0       	rjmp	.+26     	; 0x197c <__udivmodsi4_ep>

00001962 <__udivmodsi4_loop>:
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	ee 1f       	adc	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	a2 17       	cp	r26, r18
    196c:	b3 07       	cpc	r27, r19
    196e:	e4 07       	cpc	r30, r20
    1970:	f5 07       	cpc	r31, r21
    1972:	20 f0       	brcs	.+8      	; 0x197c <__udivmodsi4_ep>
    1974:	a2 1b       	sub	r26, r18
    1976:	b3 0b       	sbc	r27, r19
    1978:	e4 0b       	sbc	r30, r20
    197a:	f5 0b       	sbc	r31, r21

0000197c <__udivmodsi4_ep>:
    197c:	66 1f       	adc	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	1a 94       	dec	r1
    1986:	69 f7       	brne	.-38     	; 0x1962 <__udivmodsi4_loop>
    1988:	60 95       	com	r22
    198a:	70 95       	com	r23
    198c:	80 95       	com	r24
    198e:	90 95       	com	r25
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	bd 01       	movw	r22, r26
    1996:	cf 01       	movw	r24, r30
    1998:	08 95       	ret

0000199a <__divmodsi4>:
    199a:	05 2e       	mov	r0, r21
    199c:	97 fb       	bst	r25, 7
    199e:	1e f4       	brtc	.+6      	; 0x19a6 <__divmodsi4+0xc>
    19a0:	00 94       	com	r0
    19a2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__negsi2>
    19a6:	57 fd       	sbrc	r21, 7
    19a8:	07 d0       	rcall	.+14     	; 0x19b8 <__divmodsi4_neg2>
    19aa:	0e 94 ab 0c 	call	0x1956	; 0x1956 <__udivmodsi4>
    19ae:	07 fc       	sbrc	r0, 7
    19b0:	03 d0       	rcall	.+6      	; 0x19b8 <__divmodsi4_neg2>
    19b2:	4e f4       	brtc	.+18     	; 0x19c6 <__divmodsi4_exit>
    19b4:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__negsi2>

000019b8 <__divmodsi4_neg2>:
    19b8:	50 95       	com	r21
    19ba:	40 95       	com	r20
    19bc:	30 95       	com	r19
    19be:	21 95       	neg	r18
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	4f 4f       	sbci	r20, 0xFF	; 255
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255

000019c6 <__divmodsi4_exit>:
    19c6:	08 95       	ret

000019c8 <__negsi2>:
    19c8:	90 95       	com	r25
    19ca:	80 95       	com	r24
    19cc:	70 95       	com	r23
    19ce:	61 95       	neg	r22
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	8f 4f       	sbci	r24, 0xFF	; 255
    19d4:	9f 4f       	sbci	r25, 0xFF	; 255
    19d6:	08 95       	ret

000019d8 <__muluhisi3>:
    19d8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__umulhisi3>
    19dc:	a5 9f       	mul	r26, r21
    19de:	90 0d       	add	r25, r0
    19e0:	b4 9f       	mul	r27, r20
    19e2:	90 0d       	add	r25, r0
    19e4:	a4 9f       	mul	r26, r20
    19e6:	80 0d       	add	r24, r0
    19e8:	91 1d       	adc	r25, r1
    19ea:	11 24       	eor	r1, r1
    19ec:	08 95       	ret

000019ee <__tablejump2__>:
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	05 90       	lpm	r0, Z+
    19f4:	f4 91       	lpm	r31, Z
    19f6:	e0 2d       	mov	r30, r0
    19f8:	09 94       	ijmp

000019fa <__umulhisi3>:
    19fa:	a2 9f       	mul	r26, r18
    19fc:	b0 01       	movw	r22, r0
    19fe:	b3 9f       	mul	r27, r19
    1a00:	c0 01       	movw	r24, r0
    1a02:	a3 9f       	mul	r26, r19
    1a04:	70 0d       	add	r23, r0
    1a06:	81 1d       	adc	r24, r1
    1a08:	11 24       	eor	r1, r1
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	b2 9f       	mul	r27, r18
    1a0e:	70 0d       	add	r23, r0
    1a10:	81 1d       	adc	r24, r1
    1a12:	11 24       	eor	r1, r1
    1a14:	91 1d       	adc	r25, r1
    1a16:	08 95       	ret

00001a18 <do_random>:
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
    1a2e:	68 81       	ld	r22, Y
    1a30:	79 81       	ldd	r23, Y+1	; 0x01
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	61 15       	cp	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	81 05       	cpc	r24, r1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	21 f4       	brne	.+8      	; 0x1a48 <do_random+0x30>
    1a40:	64 e2       	ldi	r22, 0x24	; 36
    1a42:	79 ed       	ldi	r23, 0xD9	; 217
    1a44:	8b e5       	ldi	r24, 0x5B	; 91
    1a46:	97 e0       	ldi	r25, 0x07	; 7
    1a48:	2d e1       	ldi	r18, 0x1D	; 29
    1a4a:	33 ef       	ldi	r19, 0xF3	; 243
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divmodsi4>
    1a54:	49 01       	movw	r8, r18
    1a56:	5a 01       	movw	r10, r20
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	a7 ea       	ldi	r26, 0xA7	; 167
    1a5e:	b1 e4       	ldi	r27, 0x41	; 65
    1a60:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__muluhisi3>
    1a64:	6b 01       	movw	r12, r22
    1a66:	7c 01       	movw	r14, r24
    1a68:	ac ee       	ldi	r26, 0xEC	; 236
    1a6a:	b4 ef       	ldi	r27, 0xF4	; 244
    1a6c:	a5 01       	movw	r20, r10
    1a6e:	94 01       	movw	r18, r8
    1a70:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__mulohisi3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8c 0d       	add	r24, r12
    1a7a:	9d 1d       	adc	r25, r13
    1a7c:	ae 1d       	adc	r26, r14
    1a7e:	bf 1d       	adc	r27, r15
    1a80:	b7 ff       	sbrs	r27, 7
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <do_random+0x72>
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	a1 09       	sbc	r26, r1
    1a88:	b0 48       	sbci	r27, 0x80	; 128
    1a8a:	88 83       	st	Y, r24
    1a8c:	99 83       	std	Y+1, r25	; 0x01
    1a8e:	aa 83       	std	Y+2, r26	; 0x02
    1a90:	bb 83       	std	Y+3, r27	; 0x03
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	9f 77       	andi	r25, 0x7F	; 127
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	08 95       	ret

00001aae <random_r>:
    1aae:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <do_random>
    1ab2:	08 95       	ret

00001ab4 <random>:
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <do_random>
    1abc:	08 95       	ret

00001abe <srandom>:
    1abe:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1ac2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1ac6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1aca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1ace:	08 95       	ret

00001ad0 <__mulshisi3>:
    1ad0:	b7 ff       	sbrs	r27, 7
    1ad2:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__muluhisi3>

00001ad6 <__mulohisi3>:
    1ad6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__muluhisi3>
    1ada:	82 1b       	sub	r24, r18
    1adc:	93 0b       	sbc	r25, r19
    1ade:	08 95       	ret

00001ae0 <_exit>:
    1ae0:	f8 94       	cli

00001ae2 <__stop_program>:
    1ae2:	ff cf       	rjmp	.-2      	; 0x1ae2 <__stop_program>
